// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Imu_Accel_Gyro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Imu_Accel_Gyro_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_Matrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_Matrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ControlCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ControlCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_VehicleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_VehicleState_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_MotionSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_MotionSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_Segments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_Segments_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ControlPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ControlPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_ImuLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_ImuLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_LocalizerLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_LocalizerLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_Log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_Log_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CarMessages_2eproto() {
  protobuf_AddDesc_CarMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Imu_Accel_Gyro_descriptor_ = file->message_type(0);
  static const int Imu_Accel_Gyro_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, accelx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, accely_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, accelz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, gyrox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, gyroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, gyroz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, timer_),
  };
  Imu_Accel_Gyro_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Imu_Accel_Gyro_descriptor_,
      Imu_Accel_Gyro::default_instance_,
      Imu_Accel_Gyro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, _has_bits_[0]),
      -1,
      -1,
      sizeof(Imu_Accel_Gyro),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu_Accel_Gyro, _internal_metadata_),
      -1);
  CommandMsg_descriptor_ = file->message_type(1);
  static const int CommandMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMsg, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMsg, phi_),
  };
  CommandMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandMsg_descriptor_,
      CommandMsg::default_instance_,
      CommandMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandMsg, _internal_metadata_),
      -1);
  CommandReply_descriptor_ = file->message_type(2);
  static const int CommandReply_offsets_[1] = {
  };
  CommandReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommandReply_descriptor_,
      CommandReply::default_instance_,
      CommandReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, _has_bits_[0]),
      -1,
      -1,
      sizeof(CommandReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, _internal_metadata_),
      -1);
  msg_Matrix_descriptor_ = file->message_type(3);
  static const int msg_Matrix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Matrix, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Matrix, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Matrix, data_),
  };
  msg_Matrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_Matrix_descriptor_,
      msg_Matrix::default_instance_,
      msg_Matrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Matrix, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_Matrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Matrix, _internal_metadata_),
      -1);
  msg_ControlCommand_descriptor_ = file->message_type(4);
  static const int msg_ControlCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, torque_3d_),
  };
  msg_ControlCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_ControlCommand_descriptor_,
      msg_ControlCommand::default_instance_,
      msg_ControlCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_ControlCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlCommand, _internal_metadata_),
      -1);
  msg_VehicleState_descriptor_ = file->message_type(5);
  static const int msg_VehicleState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, pose_7d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, vel_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, w_3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, steering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, source_),
  };
  msg_VehicleState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_VehicleState_descriptor_,
      msg_VehicleState::default_instance_,
      msg_VehicleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_VehicleState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_VehicleState, _internal_metadata_),
      -1);
  msg_MotionSample_descriptor_ = file->message_type(6);
  static const int msg_MotionSample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_MotionSample, states_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_MotionSample, command_),
  };
  msg_MotionSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_MotionSample_descriptor_,
      msg_MotionSample::default_instance_,
      msg_MotionSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_MotionSample, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_MotionSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_MotionSample, _internal_metadata_),
      -1);
  msg_Segments_descriptor_ = file->message_type(7);
  static const int msg_Segments_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Segments, segments_),
  };
  msg_Segments_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_Segments_descriptor_,
      msg_Segments::default_instance_,
      msg_Segments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Segments, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_Segments),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Segments, _internal_metadata_),
      -1);
  msg_ControlPlan_descriptor_ = file->message_type(8);
  static const int msg_ControlPlan_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, sample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, startstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, endstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, startsampleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, startsegmentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, endsampleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, endsegmentindex_),
  };
  msg_ControlPlan_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_ControlPlan_descriptor_,
      msg_ControlPlan::default_instance_,
      msg_ControlPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_ControlPlan),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ControlPlan, _internal_metadata_),
      -1);
  msg_ImuLog_descriptor_ = file->message_type(9);
  static const int msg_ImuLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, systemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, devicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, accel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, gyro_),
  };
  msg_ImuLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_ImuLog_descriptor_,
      msg_ImuLog::default_instance_,
      msg_ImuLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_ImuLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_ImuLog, _internal_metadata_),
      -1);
  msg_LocalizerLog_descriptor_ = file->message_type(10);
  static const int msg_LocalizerLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_LocalizerLog, systemtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_LocalizerLog, devicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_LocalizerLog, pose_7d_),
  };
  msg_LocalizerLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_LocalizerLog_descriptor_,
      msg_LocalizerLog::default_instance_,
      msg_LocalizerLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_LocalizerLog, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_LocalizerLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_LocalizerLog, _internal_metadata_),
      -1);
  msg_Log_descriptor_ = file->message_type(11);
  static const int msg_Log_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, vehiclestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, controlcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, controlplan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, segments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, imu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, localizer_),
  };
  msg_Log_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      msg_Log_descriptor_,
      msg_Log::default_instance_,
      msg_Log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, _has_bits_[0]),
      -1,
      -1,
      sizeof(msg_Log),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_Log, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Imu_Accel_Gyro_descriptor_, &Imu_Accel_Gyro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandMsg_descriptor_, &CommandMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommandReply_descriptor_, &CommandReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_Matrix_descriptor_, &msg_Matrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_ControlCommand_descriptor_, &msg_ControlCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_VehicleState_descriptor_, &msg_VehicleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_MotionSample_descriptor_, &msg_MotionSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_Segments_descriptor_, &msg_Segments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_ControlPlan_descriptor_, &msg_ControlPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_ImuLog_descriptor_, &msg_ImuLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_LocalizerLog_descriptor_, &msg_LocalizerLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      msg_Log_descriptor_, &msg_Log::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarMessages_2eproto() {
  delete Imu_Accel_Gyro::default_instance_;
  delete Imu_Accel_Gyro_reflection_;
  delete CommandMsg::default_instance_;
  delete CommandMsg_reflection_;
  delete CommandReply::default_instance_;
  delete CommandReply_reflection_;
  delete msg_Matrix::default_instance_;
  delete msg_Matrix_reflection_;
  delete msg_ControlCommand::default_instance_;
  delete msg_ControlCommand_reflection_;
  delete msg_VehicleState::default_instance_;
  delete msg_VehicleState_reflection_;
  delete msg_MotionSample::default_instance_;
  delete msg_MotionSample_reflection_;
  delete msg_Segments::default_instance_;
  delete msg_Segments_reflection_;
  delete msg_ControlPlan::default_instance_;
  delete msg_ControlPlan_reflection_;
  delete msg_ImuLog::default_instance_;
  delete msg_ImuLog_reflection_;
  delete msg_LocalizerLog::default_instance_;
  delete msg_LocalizerLog_reflection_;
  delete msg_Log::default_instance_;
  delete msg_Log_reflection_;
}

void protobuf_AddDesc_CarMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CarMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CarMessages.proto\"|\n\016Imu_Accel_Gyro\022\016\n"
    "\006AccelX\030\001 \002(\001\022\016\n\006AccelY\030\002 \002(\001\022\016\n\006AccelZ\030"
    "\003 \002(\001\022\r\n\005GyroX\030\004 \002(\001\022\r\n\005GyroY\030\005 \002(\001\022\r\n\005G"
    "yroZ\030\006 \002(\001\022\r\n\005timer\030\007 \002(\005\"(\n\nCommandMsg\022"
    "\r\n\005Accel\030\001 \002(\001\022\013\n\003Phi\030\002 \002(\001\"\016\n\014CommandRe"
    "ply\":\n\nmsg_Matrix\022\014\n\004rows\030\001 \002(\r\022\014\n\004cols\030"
    "\002 \002(\r\022\020\n\004data\030\003 \003(\001B\002\020\001\"}\n\022msg_ControlCo"
    "mmand\022\r\n\005force\030\001 \002(\001\022\013\n\003phi\030\002 \002(\001\022\021\n\tcur"
    "vature\030\003 \002(\001\022\n\n\002dt\030\004 \002(\001\022\014\n\004time\030\005 \002(\001\022\036"
    "\n\ttorque_3d\030\006 \002(\0132\013.msg_Matrix\"\253\001\n\020msg_V"
    "ehicleState\022\034\n\007pose_7d\030\001 \002(\0132\013.msg_Matri"
    "x\022\033\n\006vel_3d\030\002 \002(\0132\013.msg_Matrix\022\031\n\004w_3d\030\003"
    " \002(\0132\013.msg_Matrix\022\021\n\tcurvature\030\004 \002(\001\022\020\n\010"
    "steering\030\005 \002(\001\022\014\n\004time\030\006 \002(\001\022\016\n\006source\030\007"
    " \002(\005\"[\n\020msg_MotionSample\022!\n\006states\030\001 \003(\013"
    "2\021.msg_VehicleState\022$\n\007command\030\002 \003(\0132\023.m"
    "sg_ControlCommand\"3\n\014msg_Segments\022#\n\010seg"
    "ments\030\001 \003(\0132\021.msg_MotionSample\"\212\002\n\017msg_C"
    "ontrolPlan\022\021\n\tstartTime\030\001 \002(\001\022\017\n\007endTime"
    "\030\002 \002(\001\022!\n\006sample\030\003 \002(\0132\021.msg_MotionSampl"
    "e\022%\n\nstartState\030\004 \002(\0132\021.msg_VehicleState"
    "\022#\n\010endState\030\005 \002(\0132\021.msg_VehicleState\022\030\n"
    "\020startSampleIndex\030\006 \002(\005\022\031\n\021startSegmentI"
    "ndex\030\007 \002(\005\022\026\n\016endSampleIndex\030\010 \002(\005\022\027\n\017en"
    "dSegmentIndex\030\t \002(\005\"k\n\nmsg_ImuLog\022\022\n\nsys"
    "temTime\030\001 \002(\001\022\022\n\ndeviceTime\030\002 \002(\001\022\032\n\005acc"
    "el\030\003 \002(\0132\013.msg_Matrix\022\031\n\004gyro\030\004 \002(\0132\013.ms"
    "g_Matrix\"X\n\020msg_LocalizerLog\022\022\n\nsystemTi"
    "me\030\001 \002(\001\022\022\n\ndeviceTime\030\002 \002(\001\022\034\n\007pose_7d\030"
    "\003 \002(\0132\013.msg_Matrix\"\372\001\n\007msg_Log\022\021\n\ttimest"
    "amp\030\001 \002(\001\022\'\n\014vehicleState\030\002 \001(\0132\021.msg_Ve"
    "hicleState\022+\n\016controlCommand\030\003 \001(\0132\023.msg"
    "_ControlCommand\022%\n\013controlPlan\030\004 \001(\0132\020.m"
    "sg_ControlPlan\022\037\n\010segments\030\005 \001(\0132\r.msg_S"
    "egments\022\030\n\003imu\030\006 \001(\0132\013.msg_ImuLog\022$\n\tloc"
    "alizer\030\007 \001(\0132\021.msg_LocalizerLog", 1431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarMessages.proto", &protobuf_RegisterTypes);
  Imu_Accel_Gyro::default_instance_ = new Imu_Accel_Gyro();
  CommandMsg::default_instance_ = new CommandMsg();
  CommandReply::default_instance_ = new CommandReply();
  msg_Matrix::default_instance_ = new msg_Matrix();
  msg_ControlCommand::default_instance_ = new msg_ControlCommand();
  msg_VehicleState::default_instance_ = new msg_VehicleState();
  msg_MotionSample::default_instance_ = new msg_MotionSample();
  msg_Segments::default_instance_ = new msg_Segments();
  msg_ControlPlan::default_instance_ = new msg_ControlPlan();
  msg_ImuLog::default_instance_ = new msg_ImuLog();
  msg_LocalizerLog::default_instance_ = new msg_LocalizerLog();
  msg_Log::default_instance_ = new msg_Log();
  Imu_Accel_Gyro::default_instance_->InitAsDefaultInstance();
  CommandMsg::default_instance_->InitAsDefaultInstance();
  CommandReply::default_instance_->InitAsDefaultInstance();
  msg_Matrix::default_instance_->InitAsDefaultInstance();
  msg_ControlCommand::default_instance_->InitAsDefaultInstance();
  msg_VehicleState::default_instance_->InitAsDefaultInstance();
  msg_MotionSample::default_instance_->InitAsDefaultInstance();
  msg_Segments::default_instance_->InitAsDefaultInstance();
  msg_ControlPlan::default_instance_->InitAsDefaultInstance();
  msg_ImuLog::default_instance_->InitAsDefaultInstance();
  msg_LocalizerLog::default_instance_->InitAsDefaultInstance();
  msg_Log::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarMessages_2eproto {
  StaticDescriptorInitializer_CarMessages_2eproto() {
    protobuf_AddDesc_CarMessages_2eproto();
  }
} static_descriptor_initializer_CarMessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu_Accel_Gyro::kAccelXFieldNumber;
const int Imu_Accel_Gyro::kAccelYFieldNumber;
const int Imu_Accel_Gyro::kAccelZFieldNumber;
const int Imu_Accel_Gyro::kGyroXFieldNumber;
const int Imu_Accel_Gyro::kGyroYFieldNumber;
const int Imu_Accel_Gyro::kGyroZFieldNumber;
const int Imu_Accel_Gyro::kTimerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu_Accel_Gyro::Imu_Accel_Gyro()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Imu_Accel_Gyro)
}

void Imu_Accel_Gyro::InitAsDefaultInstance() {
}

Imu_Accel_Gyro::Imu_Accel_Gyro(const Imu_Accel_Gyro& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Imu_Accel_Gyro)
}

void Imu_Accel_Gyro::SharedCtor() {
  _cached_size_ = 0;
  accelx_ = 0;
  accely_ = 0;
  accelz_ = 0;
  gyrox_ = 0;
  gyroy_ = 0;
  gyroz_ = 0;
  timer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Imu_Accel_Gyro::~Imu_Accel_Gyro() {
  // @@protoc_insertion_point(destructor:Imu_Accel_Gyro)
  SharedDtor();
}

void Imu_Accel_Gyro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Imu_Accel_Gyro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu_Accel_Gyro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Imu_Accel_Gyro_descriptor_;
}

const Imu_Accel_Gyro& Imu_Accel_Gyro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

Imu_Accel_Gyro* Imu_Accel_Gyro::default_instance_ = NULL;

Imu_Accel_Gyro* Imu_Accel_Gyro::New(::google::protobuf::Arena* arena) const {
  Imu_Accel_Gyro* n = new Imu_Accel_Gyro;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu_Accel_Gyro::Clear() {
// @@protoc_insertion_point(message_clear_start:Imu_Accel_Gyro)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Imu_Accel_Gyro, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Imu_Accel_Gyro*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(accelx_, timer_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Imu_Accel_Gyro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Imu_Accel_Gyro)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double AccelX = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelx_)));
          set_has_accelx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_AccelY;
        break;
      }

      // required double AccelY = 2;
      case 2: {
        if (tag == 17) {
         parse_AccelY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accely_)));
          set_has_accely();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_AccelZ;
        break;
      }

      // required double AccelZ = 3;
      case 3: {
        if (tag == 25) {
         parse_AccelZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelz_)));
          set_has_accelz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_GyroX;
        break;
      }

      // required double GyroX = 4;
      case 4: {
        if (tag == 33) {
         parse_GyroX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyrox_)));
          set_has_gyrox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_GyroY;
        break;
      }

      // required double GyroY = 5;
      case 5: {
        if (tag == 41) {
         parse_GyroY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroy_)));
          set_has_gyroy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_GyroZ;
        break;
      }

      // required double GyroZ = 6;
      case 6: {
        if (tag == 49) {
         parse_GyroZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroz_)));
          set_has_gyroz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_timer;
        break;
      }

      // required int32 timer = 7;
      case 7: {
        if (tag == 56) {
         parse_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Imu_Accel_Gyro)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Imu_Accel_Gyro)
  return false;
#undef DO_
}

void Imu_Accel_Gyro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Imu_Accel_Gyro)
  // required double AccelX = 1;
  if (has_accelx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->accelx(), output);
  }

  // required double AccelY = 2;
  if (has_accely()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->accely(), output);
  }

  // required double AccelZ = 3;
  if (has_accelz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->accelz(), output);
  }

  // required double GyroX = 4;
  if (has_gyrox()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gyrox(), output);
  }

  // required double GyroY = 5;
  if (has_gyroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gyroy(), output);
  }

  // required double GyroZ = 6;
  if (has_gyroz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gyroz(), output);
  }

  // required int32 timer = 7;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Imu_Accel_Gyro)
}

::google::protobuf::uint8* Imu_Accel_Gyro::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Imu_Accel_Gyro)
  // required double AccelX = 1;
  if (has_accelx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->accelx(), target);
  }

  // required double AccelY = 2;
  if (has_accely()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->accely(), target);
  }

  // required double AccelZ = 3;
  if (has_accelz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->accelz(), target);
  }

  // required double GyroX = 4;
  if (has_gyrox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gyrox(), target);
  }

  // required double GyroY = 5;
  if (has_gyroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gyroy(), target);
  }

  // required double GyroZ = 6;
  if (has_gyroz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gyroz(), target);
  }

  // required int32 timer = 7;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Imu_Accel_Gyro)
  return target;
}

int Imu_Accel_Gyro::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Imu_Accel_Gyro)
  int total_size = 0;

  if (has_accelx()) {
    // required double AccelX = 1;
    total_size += 1 + 8;
  }

  if (has_accely()) {
    // required double AccelY = 2;
    total_size += 1 + 8;
  }

  if (has_accelz()) {
    // required double AccelZ = 3;
    total_size += 1 + 8;
  }

  if (has_gyrox()) {
    // required double GyroX = 4;
    total_size += 1 + 8;
  }

  if (has_gyroy()) {
    // required double GyroY = 5;
    total_size += 1 + 8;
  }

  if (has_gyroz()) {
    // required double GyroZ = 6;
    total_size += 1 + 8;
  }

  if (has_timer()) {
    // required int32 timer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timer());
  }

  return total_size;
}
int Imu_Accel_Gyro::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Imu_Accel_Gyro)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required double AccelX = 1;
    total_size += 1 + 8;

    // required double AccelY = 2;
    total_size += 1 + 8;

    // required double AccelZ = 3;
    total_size += 1 + 8;

    // required double GyroX = 4;
    total_size += 1 + 8;

    // required double GyroY = 5;
    total_size += 1 + 8;

    // required double GyroZ = 6;
    total_size += 1 + 8;

    // required int32 timer = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu_Accel_Gyro::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Imu_Accel_Gyro)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Imu_Accel_Gyro* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu_Accel_Gyro>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Imu_Accel_Gyro)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Imu_Accel_Gyro)
    MergeFrom(*source);
  }
}

void Imu_Accel_Gyro::MergeFrom(const Imu_Accel_Gyro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Imu_Accel_Gyro)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accelx()) {
      set_accelx(from.accelx());
    }
    if (from.has_accely()) {
      set_accely(from.accely());
    }
    if (from.has_accelz()) {
      set_accelz(from.accelz());
    }
    if (from.has_gyrox()) {
      set_gyrox(from.gyrox());
    }
    if (from.has_gyroy()) {
      set_gyroy(from.gyroy());
    }
    if (from.has_gyroz()) {
      set_gyroz(from.gyroz());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Imu_Accel_Gyro::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Imu_Accel_Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu_Accel_Gyro::CopyFrom(const Imu_Accel_Gyro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Imu_Accel_Gyro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu_Accel_Gyro::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Imu_Accel_Gyro::Swap(Imu_Accel_Gyro* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu_Accel_Gyro::InternalSwap(Imu_Accel_Gyro* other) {
  std::swap(accelx_, other->accelx_);
  std::swap(accely_, other->accely_);
  std::swap(accelz_, other->accelz_);
  std::swap(gyrox_, other->gyrox_);
  std::swap(gyroy_, other->gyroy_);
  std::swap(gyroz_, other->gyroz_);
  std::swap(timer_, other->timer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu_Accel_Gyro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Imu_Accel_Gyro_descriptor_;
  metadata.reflection = Imu_Accel_Gyro_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imu_Accel_Gyro

// required double AccelX = 1;
bool Imu_Accel_Gyro::has_accelx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imu_Accel_Gyro::set_has_accelx() {
  _has_bits_[0] |= 0x00000001u;
}
void Imu_Accel_Gyro::clear_has_accelx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imu_Accel_Gyro::clear_accelx() {
  accelx_ = 0;
  clear_has_accelx();
}
 double Imu_Accel_Gyro::accelx() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.AccelX)
  return accelx_;
}
 void Imu_Accel_Gyro::set_accelx(double value) {
  set_has_accelx();
  accelx_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.AccelX)
}

// required double AccelY = 2;
bool Imu_Accel_Gyro::has_accely() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Imu_Accel_Gyro::set_has_accely() {
  _has_bits_[0] |= 0x00000002u;
}
void Imu_Accel_Gyro::clear_has_accely() {
  _has_bits_[0] &= ~0x00000002u;
}
void Imu_Accel_Gyro::clear_accely() {
  accely_ = 0;
  clear_has_accely();
}
 double Imu_Accel_Gyro::accely() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.AccelY)
  return accely_;
}
 void Imu_Accel_Gyro::set_accely(double value) {
  set_has_accely();
  accely_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.AccelY)
}

// required double AccelZ = 3;
bool Imu_Accel_Gyro::has_accelz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imu_Accel_Gyro::set_has_accelz() {
  _has_bits_[0] |= 0x00000004u;
}
void Imu_Accel_Gyro::clear_has_accelz() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imu_Accel_Gyro::clear_accelz() {
  accelz_ = 0;
  clear_has_accelz();
}
 double Imu_Accel_Gyro::accelz() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.AccelZ)
  return accelz_;
}
 void Imu_Accel_Gyro::set_accelz(double value) {
  set_has_accelz();
  accelz_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.AccelZ)
}

// required double GyroX = 4;
bool Imu_Accel_Gyro::has_gyrox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Imu_Accel_Gyro::set_has_gyrox() {
  _has_bits_[0] |= 0x00000008u;
}
void Imu_Accel_Gyro::clear_has_gyrox() {
  _has_bits_[0] &= ~0x00000008u;
}
void Imu_Accel_Gyro::clear_gyrox() {
  gyrox_ = 0;
  clear_has_gyrox();
}
 double Imu_Accel_Gyro::gyrox() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.GyroX)
  return gyrox_;
}
 void Imu_Accel_Gyro::set_gyrox(double value) {
  set_has_gyrox();
  gyrox_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.GyroX)
}

// required double GyroY = 5;
bool Imu_Accel_Gyro::has_gyroy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Imu_Accel_Gyro::set_has_gyroy() {
  _has_bits_[0] |= 0x00000010u;
}
void Imu_Accel_Gyro::clear_has_gyroy() {
  _has_bits_[0] &= ~0x00000010u;
}
void Imu_Accel_Gyro::clear_gyroy() {
  gyroy_ = 0;
  clear_has_gyroy();
}
 double Imu_Accel_Gyro::gyroy() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.GyroY)
  return gyroy_;
}
 void Imu_Accel_Gyro::set_gyroy(double value) {
  set_has_gyroy();
  gyroy_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.GyroY)
}

// required double GyroZ = 6;
bool Imu_Accel_Gyro::has_gyroz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Imu_Accel_Gyro::set_has_gyroz() {
  _has_bits_[0] |= 0x00000020u;
}
void Imu_Accel_Gyro::clear_has_gyroz() {
  _has_bits_[0] &= ~0x00000020u;
}
void Imu_Accel_Gyro::clear_gyroz() {
  gyroz_ = 0;
  clear_has_gyroz();
}
 double Imu_Accel_Gyro::gyroz() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.GyroZ)
  return gyroz_;
}
 void Imu_Accel_Gyro::set_gyroz(double value) {
  set_has_gyroz();
  gyroz_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.GyroZ)
}

// required int32 timer = 7;
bool Imu_Accel_Gyro::has_timer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Imu_Accel_Gyro::set_has_timer() {
  _has_bits_[0] |= 0x00000040u;
}
void Imu_Accel_Gyro::clear_has_timer() {
  _has_bits_[0] &= ~0x00000040u;
}
void Imu_Accel_Gyro::clear_timer() {
  timer_ = 0;
  clear_has_timer();
}
 ::google::protobuf::int32 Imu_Accel_Gyro::timer() const {
  // @@protoc_insertion_point(field_get:Imu_Accel_Gyro.timer)
  return timer_;
}
 void Imu_Accel_Gyro::set_timer(::google::protobuf::int32 value) {
  set_has_timer();
  timer_ = value;
  // @@protoc_insertion_point(field_set:Imu_Accel_Gyro.timer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandMsg::kAccelFieldNumber;
const int CommandMsg::kPhiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandMsg::CommandMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommandMsg)
}

void CommandMsg::InitAsDefaultInstance() {
}

CommandMsg::CommandMsg(const CommandMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommandMsg)
}

void CommandMsg::SharedCtor() {
  _cached_size_ = 0;
  accel_ = 0;
  phi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandMsg::~CommandMsg() {
  // @@protoc_insertion_point(destructor:CommandMsg)
  SharedDtor();
}

void CommandMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandMsg_descriptor_;
}

const CommandMsg& CommandMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

CommandMsg* CommandMsg::default_instance_ = NULL;

CommandMsg* CommandMsg::New(::google::protobuf::Arena* arena) const {
  CommandMsg* n = new CommandMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommandMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommandMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(accel_, phi_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommandMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Accel = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_)));
          set_has_accel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Phi;
        break;
      }

      // required double Phi = 2;
      case 2: {
        if (tag == 17) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommandMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommandMsg)
  return false;
#undef DO_
}

void CommandMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommandMsg)
  // required double Accel = 1;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->accel(), output);
  }

  // required double Phi = 2;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommandMsg)
}

::google::protobuf::uint8* CommandMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandMsg)
  // required double Accel = 1;
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->accel(), target);
  }

  // required double Phi = 2;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandMsg)
  return target;
}

int CommandMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommandMsg)
  int total_size = 0;

  if (has_accel()) {
    // required double Accel = 1;
    total_size += 1 + 8;
  }

  if (has_phi()) {
    // required double Phi = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int CommandMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CommandMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double Accel = 1;
    total_size += 1 + 8;

    // required double Phi = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandMsg)
    MergeFrom(*source);
  }
}

void CommandMsg::MergeFrom(const CommandMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accel()) {
      set_accel(from.accel());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMsg::CopyFrom(const CommandMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommandMsg::Swap(CommandMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandMsg::InternalSwap(CommandMsg* other) {
  std::swap(accel_, other->accel_);
  std::swap(phi_, other->phi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandMsg_descriptor_;
  metadata.reflection = CommandMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandMsg

// required double Accel = 1;
bool CommandMsg::has_accel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommandMsg::set_has_accel() {
  _has_bits_[0] |= 0x00000001u;
}
void CommandMsg::clear_has_accel() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommandMsg::clear_accel() {
  accel_ = 0;
  clear_has_accel();
}
 double CommandMsg::accel() const {
  // @@protoc_insertion_point(field_get:CommandMsg.Accel)
  return accel_;
}
 void CommandMsg::set_accel(double value) {
  set_has_accel();
  accel_ = value;
  // @@protoc_insertion_point(field_set:CommandMsg.Accel)
}

// required double Phi = 2;
bool CommandMsg::has_phi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommandMsg::set_has_phi() {
  _has_bits_[0] |= 0x00000002u;
}
void CommandMsg::clear_has_phi() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommandMsg::clear_phi() {
  phi_ = 0;
  clear_has_phi();
}
 double CommandMsg::phi() const {
  // @@protoc_insertion_point(field_get:CommandMsg.Phi)
  return phi_;
}
 void CommandMsg::set_phi(double value) {
  set_has_phi();
  phi_ = value;
  // @@protoc_insertion_point(field_set:CommandMsg.Phi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandReply::CommandReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommandReply)
}

void CommandReply::InitAsDefaultInstance() {
}

CommandReply::CommandReply(const CommandReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommandReply)
}

void CommandReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReply::~CommandReply() {
  // @@protoc_insertion_point(destructor:CommandReply)
  SharedDtor();
}

void CommandReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReply_descriptor_;
}

const CommandReply& CommandReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

CommandReply* CommandReply::default_instance_ = NULL;

CommandReply* CommandReply::New(::google::protobuf::Arena* arena) const {
  CommandReply* n = new CommandReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CommandReply)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CommandReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommandReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CommandReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommandReply)
  return false;
#undef DO_
}

void CommandReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommandReply)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommandReply)
}

::google::protobuf::uint8* CommandReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommandReply)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommandReply)
  return target;
}

int CommandReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CommandReply)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommandReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CommandReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommandReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommandReply)
    MergeFrom(*source);
  }
}

void CommandReply::MergeFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommandReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CommandReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReply::CopyFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReply::IsInitialized() const {

  return true;
}

void CommandReply::Swap(CommandReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandReply::InternalSwap(CommandReply* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReply_descriptor_;
  metadata.reflection = CommandReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_Matrix::kRowsFieldNumber;
const int msg_Matrix::kColsFieldNumber;
const int msg_Matrix::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_Matrix::msg_Matrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_Matrix)
}

void msg_Matrix::InitAsDefaultInstance() {
}

msg_Matrix::msg_Matrix(const msg_Matrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_Matrix)
}

void msg_Matrix::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_Matrix::~msg_Matrix() {
  // @@protoc_insertion_point(destructor:msg_Matrix)
  SharedDtor();
}

void msg_Matrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_Matrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_Matrix_descriptor_;
}

const msg_Matrix& msg_Matrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_Matrix* msg_Matrix::default_instance_ = NULL;

msg_Matrix* msg_Matrix::New(::google::protobuf::Arena* arena) const {
  msg_Matrix* n = new msg_Matrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_Matrix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_Matrix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_Matrix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_Matrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // required uint32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_Matrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_Matrix)
  return false;
#undef DO_
}

void msg_Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_Matrix)
  // required uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_Matrix)
}

::google::protobuf::uint8* msg_Matrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_Matrix)
  // required uint32 rows = 1;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_Matrix)
  return target;
}

int msg_Matrix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_Matrix)
  int total_size = 0;

  if (has_rows()) {
    // required uint32 rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rows());
  }

  if (has_cols()) {
    // required uint32 cols = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cols());
  }

  return total_size;
}
int msg_Matrix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_Matrix)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rows());

    // required uint32 cols = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cols());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_Matrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_Matrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_Matrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_Matrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_Matrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_Matrix)
    MergeFrom(*source);
  }
}

void msg_Matrix::MergeFrom(const msg_Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_Matrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_Matrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_Matrix::CopyFrom(const msg_Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_Matrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void msg_Matrix::Swap(msg_Matrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_Matrix::InternalSwap(msg_Matrix* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_Matrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_Matrix_descriptor_;
  metadata.reflection = msg_Matrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_Matrix

// required uint32 rows = 1;
bool msg_Matrix::has_rows() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_Matrix::set_has_rows() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_Matrix::clear_has_rows() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_Matrix::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
 ::google::protobuf::uint32 msg_Matrix::rows() const {
  // @@protoc_insertion_point(field_get:msg_Matrix.rows)
  return rows_;
}
 void msg_Matrix::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:msg_Matrix.rows)
}

// required uint32 cols = 2;
bool msg_Matrix::has_cols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_Matrix::set_has_cols() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_Matrix::clear_has_cols() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_Matrix::clear_cols() {
  cols_ = 0u;
  clear_has_cols();
}
 ::google::protobuf::uint32 msg_Matrix::cols() const {
  // @@protoc_insertion_point(field_get:msg_Matrix.cols)
  return cols_;
}
 void msg_Matrix::set_cols(::google::protobuf::uint32 value) {
  set_has_cols();
  cols_ = value;
  // @@protoc_insertion_point(field_set:msg_Matrix.cols)
}

// repeated double data = 3 [packed = true];
int msg_Matrix::data_size() const {
  return data_.size();
}
void msg_Matrix::clear_data() {
  data_.Clear();
}
 double msg_Matrix::data(int index) const {
  // @@protoc_insertion_point(field_get:msg_Matrix.data)
  return data_.Get(index);
}
 void msg_Matrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg_Matrix.data)
}
 void msg_Matrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:msg_Matrix.data)
}
 const ::google::protobuf::RepeatedField< double >&
msg_Matrix::data() const {
  // @@protoc_insertion_point(field_list:msg_Matrix.data)
  return data_;
}
 ::google::protobuf::RepeatedField< double >*
msg_Matrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg_Matrix.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_ControlCommand::kForceFieldNumber;
const int msg_ControlCommand::kPhiFieldNumber;
const int msg_ControlCommand::kCurvatureFieldNumber;
const int msg_ControlCommand::kDtFieldNumber;
const int msg_ControlCommand::kTimeFieldNumber;
const int msg_ControlCommand::kTorque3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_ControlCommand::msg_ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_ControlCommand)
}

void msg_ControlCommand::InitAsDefaultInstance() {
  torque_3d_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
}

msg_ControlCommand::msg_ControlCommand(const msg_ControlCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_ControlCommand)
}

void msg_ControlCommand::SharedCtor() {
  _cached_size_ = 0;
  force_ = 0;
  phi_ = 0;
  curvature_ = 0;
  dt_ = 0;
  time_ = 0;
  torque_3d_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ControlCommand::~msg_ControlCommand() {
  // @@protoc_insertion_point(destructor:msg_ControlCommand)
  SharedDtor();
}

void msg_ControlCommand::SharedDtor() {
  if (this != default_instance_) {
    delete torque_3d_;
  }
}

void msg_ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ControlCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ControlCommand_descriptor_;
}

const msg_ControlCommand& msg_ControlCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_ControlCommand* msg_ControlCommand::default_instance_ = NULL;

msg_ControlCommand* msg_ControlCommand::New(::google::protobuf::Arena* arena) const {
  msg_ControlCommand* n = new msg_ControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_ControlCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_ControlCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_ControlCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(force_, time_);
    if (has_torque_3d()) {
      if (torque_3d_ != NULL) torque_3d_->::msg_Matrix::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double force = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_phi;
        break;
      }

      // required double phi = 2;
      case 2: {
        if (tag == 17) {
         parse_phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_curvature;
        break;
      }

      // required double curvature = 3;
      case 3: {
        if (tag == 25) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_dt;
        break;
      }

      // required double dt = 4;
      case 4: {
        if (tag == 33) {
         parse_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
          set_has_dt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_time;
        break;
      }

      // required double time = 5;
      case 5: {
        if (tag == 41) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_torque_3d;
        break;
      }

      // required .msg_Matrix torque_3d = 6;
      case 6: {
        if (tag == 50) {
         parse_torque_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torque_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_ControlCommand)
  return false;
#undef DO_
}

void msg_ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_ControlCommand)
  // required double force = 1;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->force(), output);
  }

  // required double phi = 2;
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi(), output);
  }

  // required double curvature = 3;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->curvature(), output);
  }

  // required double dt = 4;
  if (has_dt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dt(), output);
  }

  // required double time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->time(), output);
  }

  // required .msg_Matrix torque_3d = 6;
  if (has_torque_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->torque_3d_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_ControlCommand)
}

::google::protobuf::uint8* msg_ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_ControlCommand)
  // required double force = 1;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->force(), target);
  }

  // required double phi = 2;
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi(), target);
  }

  // required double curvature = 3;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->curvature(), target);
  }

  // required double dt = 4;
  if (has_dt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dt(), target);
  }

  // required double time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->time(), target);
  }

  // required .msg_Matrix torque_3d = 6;
  if (has_torque_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->torque_3d_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_ControlCommand)
  return target;
}

int msg_ControlCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_ControlCommand)
  int total_size = 0;

  if (has_force()) {
    // required double force = 1;
    total_size += 1 + 8;
  }

  if (has_phi()) {
    // required double phi = 2;
    total_size += 1 + 8;
  }

  if (has_curvature()) {
    // required double curvature = 3;
    total_size += 1 + 8;
  }

  if (has_dt()) {
    // required double dt = 4;
    total_size += 1 + 8;
  }

  if (has_time()) {
    // required double time = 5;
    total_size += 1 + 8;
  }

  if (has_torque_3d()) {
    // required .msg_Matrix torque_3d = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_3d_);
  }

  return total_size;
}
int msg_ControlCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_ControlCommand)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double force = 1;
    total_size += 1 + 8;

    // required double phi = 2;
    total_size += 1 + 8;

    // required double curvature = 3;
    total_size += 1 + 8;

    // required double dt = 4;
    total_size += 1 + 8;

    // required double time = 5;
    total_size += 1 + 8;

    // required .msg_Matrix torque_3d = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_3d_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_ControlCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_ControlCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_ControlCommand)
    MergeFrom(*source);
  }
}

void msg_ControlCommand::MergeFrom(const msg_ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_ControlCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_dt()) {
      set_dt(from.dt());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_torque_3d()) {
      mutable_torque_3d()->::msg_Matrix::MergeFrom(from.torque_3d());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ControlCommand::CopyFrom(const msg_ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ControlCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_torque_3d()) {
    if (!this->torque_3d_->IsInitialized()) return false;
  }
  return true;
}

void msg_ControlCommand::Swap(msg_ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_ControlCommand::InternalSwap(msg_ControlCommand* other) {
  std::swap(force_, other->force_);
  std::swap(phi_, other->phi_);
  std::swap(curvature_, other->curvature_);
  std::swap(dt_, other->dt_);
  std::swap(time_, other->time_);
  std::swap(torque_3d_, other->torque_3d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_ControlCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ControlCommand_descriptor_;
  metadata.reflection = msg_ControlCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_ControlCommand

// required double force = 1;
bool msg_ControlCommand::has_force() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_ControlCommand::set_has_force() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_ControlCommand::clear_has_force() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_ControlCommand::clear_force() {
  force_ = 0;
  clear_has_force();
}
 double msg_ControlCommand::force() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.force)
  return force_;
}
 void msg_ControlCommand::set_force(double value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlCommand.force)
}

// required double phi = 2;
bool msg_ControlCommand::has_phi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_ControlCommand::set_has_phi() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_ControlCommand::clear_has_phi() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_ControlCommand::clear_phi() {
  phi_ = 0;
  clear_has_phi();
}
 double msg_ControlCommand::phi() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.phi)
  return phi_;
}
 void msg_ControlCommand::set_phi(double value) {
  set_has_phi();
  phi_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlCommand.phi)
}

// required double curvature = 3;
bool msg_ControlCommand::has_curvature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_ControlCommand::set_has_curvature() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_ControlCommand::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_ControlCommand::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double msg_ControlCommand::curvature() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.curvature)
  return curvature_;
}
 void msg_ControlCommand::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlCommand.curvature)
}

// required double dt = 4;
bool msg_ControlCommand::has_dt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void msg_ControlCommand::set_has_dt() {
  _has_bits_[0] |= 0x00000008u;
}
void msg_ControlCommand::clear_has_dt() {
  _has_bits_[0] &= ~0x00000008u;
}
void msg_ControlCommand::clear_dt() {
  dt_ = 0;
  clear_has_dt();
}
 double msg_ControlCommand::dt() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.dt)
  return dt_;
}
 void msg_ControlCommand::set_dt(double value) {
  set_has_dt();
  dt_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlCommand.dt)
}

// required double time = 5;
bool msg_ControlCommand::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void msg_ControlCommand::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void msg_ControlCommand::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void msg_ControlCommand::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double msg_ControlCommand::time() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.time)
  return time_;
}
 void msg_ControlCommand::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlCommand.time)
}

// required .msg_Matrix torque_3d = 6;
bool msg_ControlCommand::has_torque_3d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void msg_ControlCommand::set_has_torque_3d() {
  _has_bits_[0] |= 0x00000020u;
}
void msg_ControlCommand::clear_has_torque_3d() {
  _has_bits_[0] &= ~0x00000020u;
}
void msg_ControlCommand::clear_torque_3d() {
  if (torque_3d_ != NULL) torque_3d_->::msg_Matrix::Clear();
  clear_has_torque_3d();
}
const ::msg_Matrix& msg_ControlCommand::torque_3d() const {
  // @@protoc_insertion_point(field_get:msg_ControlCommand.torque_3d)
  return torque_3d_ != NULL ? *torque_3d_ : *default_instance_->torque_3d_;
}
::msg_Matrix* msg_ControlCommand::mutable_torque_3d() {
  set_has_torque_3d();
  if (torque_3d_ == NULL) {
    torque_3d_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_ControlCommand.torque_3d)
  return torque_3d_;
}
::msg_Matrix* msg_ControlCommand::release_torque_3d() {
  // @@protoc_insertion_point(field_release:msg_ControlCommand.torque_3d)
  clear_has_torque_3d();
  ::msg_Matrix* temp = torque_3d_;
  torque_3d_ = NULL;
  return temp;
}
void msg_ControlCommand::set_allocated_torque_3d(::msg_Matrix* torque_3d) {
  delete torque_3d_;
  torque_3d_ = torque_3d;
  if (torque_3d) {
    set_has_torque_3d();
  } else {
    clear_has_torque_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ControlCommand.torque_3d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_VehicleState::kPose7DFieldNumber;
const int msg_VehicleState::kVel3DFieldNumber;
const int msg_VehicleState::kW3DFieldNumber;
const int msg_VehicleState::kCurvatureFieldNumber;
const int msg_VehicleState::kSteeringFieldNumber;
const int msg_VehicleState::kTimeFieldNumber;
const int msg_VehicleState::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_VehicleState::msg_VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_VehicleState)
}

void msg_VehicleState::InitAsDefaultInstance() {
  pose_7d_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
  vel_3d_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
  w_3d_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
}

msg_VehicleState::msg_VehicleState(const msg_VehicleState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_VehicleState)
}

void msg_VehicleState::SharedCtor() {
  _cached_size_ = 0;
  pose_7d_ = NULL;
  vel_3d_ = NULL;
  w_3d_ = NULL;
  curvature_ = 0;
  steering_ = 0;
  time_ = 0;
  source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_VehicleState::~msg_VehicleState() {
  // @@protoc_insertion_point(destructor:msg_VehicleState)
  SharedDtor();
}

void msg_VehicleState::SharedDtor() {
  if (this != default_instance_) {
    delete pose_7d_;
    delete vel_3d_;
    delete w_3d_;
  }
}

void msg_VehicleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_VehicleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_VehicleState_descriptor_;
}

const msg_VehicleState& msg_VehicleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_VehicleState* msg_VehicleState::default_instance_ = NULL;

msg_VehicleState* msg_VehicleState::New(::google::protobuf::Arena* arena) const {
  msg_VehicleState* n = new msg_VehicleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_VehicleState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_VehicleState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_VehicleState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(curvature_, source_);
    if (has_pose_7d()) {
      if (pose_7d_ != NULL) pose_7d_->::msg_Matrix::Clear();
    }
    if (has_vel_3d()) {
      if (vel_3d_ != NULL) vel_3d_->::msg_Matrix::Clear();
    }
    if (has_w_3d()) {
      if (w_3d_ != NULL) w_3d_->::msg_Matrix::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_VehicleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_Matrix pose_7d = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_7d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vel_3d;
        break;
      }

      // required .msg_Matrix vel_3d = 2;
      case 2: {
        if (tag == 18) {
         parse_vel_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vel_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_w_3d;
        break;
      }

      // required .msg_Matrix w_3d = 3;
      case 3: {
        if (tag == 26) {
         parse_w_3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_w_3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_curvature;
        break;
      }

      // required double curvature = 4;
      case 4: {
        if (tag == 33) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_steering;
        break;
      }

      // required double steering = 5;
      case 5: {
        if (tag == 41) {
         parse_steering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_)));
          set_has_steering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_time;
        break;
      }

      // required double time = 6;
      case 6: {
        if (tag == 49) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_source;
        break;
      }

      // required int32 source = 7;
      case 7: {
        if (tag == 56) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_VehicleState)
  return false;
#undef DO_
}

void msg_VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_VehicleState)
  // required .msg_Matrix pose_7d = 1;
  if (has_pose_7d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_7d_, output);
  }

  // required .msg_Matrix vel_3d = 2;
  if (has_vel_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vel_3d_, output);
  }

  // required .msg_Matrix w_3d = 3;
  if (has_w_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->w_3d_, output);
  }

  // required double curvature = 4;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curvature(), output);
  }

  // required double steering = 5;
  if (has_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steering(), output);
  }

  // required double time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->time(), output);
  }

  // required int32 source = 7;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_VehicleState)
}

::google::protobuf::uint8* msg_VehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_VehicleState)
  // required .msg_Matrix pose_7d = 1;
  if (has_pose_7d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_7d_, false, target);
  }

  // required .msg_Matrix vel_3d = 2;
  if (has_vel_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vel_3d_, false, target);
  }

  // required .msg_Matrix w_3d = 3;
  if (has_w_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->w_3d_, false, target);
  }

  // required double curvature = 4;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curvature(), target);
  }

  // required double steering = 5;
  if (has_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steering(), target);
  }

  // required double time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->time(), target);
  }

  // required int32 source = 7;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_VehicleState)
  return target;
}

int msg_VehicleState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_VehicleState)
  int total_size = 0;

  if (has_pose_7d()) {
    // required .msg_Matrix pose_7d = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_7d_);
  }

  if (has_vel_3d()) {
    // required .msg_Matrix vel_3d = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vel_3d_);
  }

  if (has_w_3d()) {
    // required .msg_Matrix w_3d = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_3d_);
  }

  if (has_curvature()) {
    // required double curvature = 4;
    total_size += 1 + 8;
  }

  if (has_steering()) {
    // required double steering = 5;
    total_size += 1 + 8;
  }

  if (has_time()) {
    // required double time = 6;
    total_size += 1 + 8;
  }

  if (has_source()) {
    // required int32 source = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  return total_size;
}
int msg_VehicleState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_VehicleState)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .msg_Matrix pose_7d = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_7d_);

    // required .msg_Matrix vel_3d = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vel_3d_);

    // required .msg_Matrix w_3d = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->w_3d_);

    // required double curvature = 4;
    total_size += 1 + 8;

    // required double steering = 5;
    total_size += 1 + 8;

    // required double time = 6;
    total_size += 1 + 8;

    // required int32 source = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_VehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_VehicleState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_VehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_VehicleState)
    MergeFrom(*source);
  }
}

void msg_VehicleState::MergeFrom(const msg_VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_VehicleState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pose_7d()) {
      mutable_pose_7d()->::msg_Matrix::MergeFrom(from.pose_7d());
    }
    if (from.has_vel_3d()) {
      mutable_vel_3d()->::msg_Matrix::MergeFrom(from.vel_3d());
    }
    if (from.has_w_3d()) {
      mutable_w_3d()->::msg_Matrix::MergeFrom(from.w_3d());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_steering()) {
      set_steering(from.steering());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_VehicleState::CopyFrom(const msg_VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_VehicleState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_pose_7d()) {
    if (!this->pose_7d_->IsInitialized()) return false;
  }
  if (has_vel_3d()) {
    if (!this->vel_3d_->IsInitialized()) return false;
  }
  if (has_w_3d()) {
    if (!this->w_3d_->IsInitialized()) return false;
  }
  return true;
}

void msg_VehicleState::Swap(msg_VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_VehicleState::InternalSwap(msg_VehicleState* other) {
  std::swap(pose_7d_, other->pose_7d_);
  std::swap(vel_3d_, other->vel_3d_);
  std::swap(w_3d_, other->w_3d_);
  std::swap(curvature_, other->curvature_);
  std::swap(steering_, other->steering_);
  std::swap(time_, other->time_);
  std::swap(source_, other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_VehicleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_VehicleState_descriptor_;
  metadata.reflection = msg_VehicleState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_VehicleState

// required .msg_Matrix pose_7d = 1;
bool msg_VehicleState::has_pose_7d() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_VehicleState::set_has_pose_7d() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_VehicleState::clear_has_pose_7d() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_VehicleState::clear_pose_7d() {
  if (pose_7d_ != NULL) pose_7d_->::msg_Matrix::Clear();
  clear_has_pose_7d();
}
const ::msg_Matrix& msg_VehicleState::pose_7d() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.pose_7d)
  return pose_7d_ != NULL ? *pose_7d_ : *default_instance_->pose_7d_;
}
::msg_Matrix* msg_VehicleState::mutable_pose_7d() {
  set_has_pose_7d();
  if (pose_7d_ == NULL) {
    pose_7d_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_VehicleState.pose_7d)
  return pose_7d_;
}
::msg_Matrix* msg_VehicleState::release_pose_7d() {
  // @@protoc_insertion_point(field_release:msg_VehicleState.pose_7d)
  clear_has_pose_7d();
  ::msg_Matrix* temp = pose_7d_;
  pose_7d_ = NULL;
  return temp;
}
void msg_VehicleState::set_allocated_pose_7d(::msg_Matrix* pose_7d) {
  delete pose_7d_;
  pose_7d_ = pose_7d;
  if (pose_7d) {
    set_has_pose_7d();
  } else {
    clear_has_pose_7d();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_VehicleState.pose_7d)
}

// required .msg_Matrix vel_3d = 2;
bool msg_VehicleState::has_vel_3d() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_VehicleState::set_has_vel_3d() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_VehicleState::clear_has_vel_3d() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_VehicleState::clear_vel_3d() {
  if (vel_3d_ != NULL) vel_3d_->::msg_Matrix::Clear();
  clear_has_vel_3d();
}
const ::msg_Matrix& msg_VehicleState::vel_3d() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.vel_3d)
  return vel_3d_ != NULL ? *vel_3d_ : *default_instance_->vel_3d_;
}
::msg_Matrix* msg_VehicleState::mutable_vel_3d() {
  set_has_vel_3d();
  if (vel_3d_ == NULL) {
    vel_3d_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_VehicleState.vel_3d)
  return vel_3d_;
}
::msg_Matrix* msg_VehicleState::release_vel_3d() {
  // @@protoc_insertion_point(field_release:msg_VehicleState.vel_3d)
  clear_has_vel_3d();
  ::msg_Matrix* temp = vel_3d_;
  vel_3d_ = NULL;
  return temp;
}
void msg_VehicleState::set_allocated_vel_3d(::msg_Matrix* vel_3d) {
  delete vel_3d_;
  vel_3d_ = vel_3d;
  if (vel_3d) {
    set_has_vel_3d();
  } else {
    clear_has_vel_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_VehicleState.vel_3d)
}

// required .msg_Matrix w_3d = 3;
bool msg_VehicleState::has_w_3d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_VehicleState::set_has_w_3d() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_VehicleState::clear_has_w_3d() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_VehicleState::clear_w_3d() {
  if (w_3d_ != NULL) w_3d_->::msg_Matrix::Clear();
  clear_has_w_3d();
}
const ::msg_Matrix& msg_VehicleState::w_3d() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.w_3d)
  return w_3d_ != NULL ? *w_3d_ : *default_instance_->w_3d_;
}
::msg_Matrix* msg_VehicleState::mutable_w_3d() {
  set_has_w_3d();
  if (w_3d_ == NULL) {
    w_3d_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_VehicleState.w_3d)
  return w_3d_;
}
::msg_Matrix* msg_VehicleState::release_w_3d() {
  // @@protoc_insertion_point(field_release:msg_VehicleState.w_3d)
  clear_has_w_3d();
  ::msg_Matrix* temp = w_3d_;
  w_3d_ = NULL;
  return temp;
}
void msg_VehicleState::set_allocated_w_3d(::msg_Matrix* w_3d) {
  delete w_3d_;
  w_3d_ = w_3d;
  if (w_3d) {
    set_has_w_3d();
  } else {
    clear_has_w_3d();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_VehicleState.w_3d)
}

// required double curvature = 4;
bool msg_VehicleState::has_curvature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void msg_VehicleState::set_has_curvature() {
  _has_bits_[0] |= 0x00000008u;
}
void msg_VehicleState::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000008u;
}
void msg_VehicleState::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
 double msg_VehicleState::curvature() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.curvature)
  return curvature_;
}
 void msg_VehicleState::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:msg_VehicleState.curvature)
}

// required double steering = 5;
bool msg_VehicleState::has_steering() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void msg_VehicleState::set_has_steering() {
  _has_bits_[0] |= 0x00000010u;
}
void msg_VehicleState::clear_has_steering() {
  _has_bits_[0] &= ~0x00000010u;
}
void msg_VehicleState::clear_steering() {
  steering_ = 0;
  clear_has_steering();
}
 double msg_VehicleState::steering() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.steering)
  return steering_;
}
 void msg_VehicleState::set_steering(double value) {
  set_has_steering();
  steering_ = value;
  // @@protoc_insertion_point(field_set:msg_VehicleState.steering)
}

// required double time = 6;
bool msg_VehicleState::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void msg_VehicleState::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
void msg_VehicleState::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void msg_VehicleState::clear_time() {
  time_ = 0;
  clear_has_time();
}
 double msg_VehicleState::time() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.time)
  return time_;
}
 void msg_VehicleState::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:msg_VehicleState.time)
}

// required int32 source = 7;
bool msg_VehicleState::has_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void msg_VehicleState::set_has_source() {
  _has_bits_[0] |= 0x00000040u;
}
void msg_VehicleState::clear_has_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void msg_VehicleState::clear_source() {
  source_ = 0;
  clear_has_source();
}
 ::google::protobuf::int32 msg_VehicleState::source() const {
  // @@protoc_insertion_point(field_get:msg_VehicleState.source)
  return source_;
}
 void msg_VehicleState::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:msg_VehicleState.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_MotionSample::kStatesFieldNumber;
const int msg_MotionSample::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_MotionSample::msg_MotionSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_MotionSample)
}

void msg_MotionSample::InitAsDefaultInstance() {
}

msg_MotionSample::msg_MotionSample(const msg_MotionSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_MotionSample)
}

void msg_MotionSample::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_MotionSample::~msg_MotionSample() {
  // @@protoc_insertion_point(destructor:msg_MotionSample)
  SharedDtor();
}

void msg_MotionSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_MotionSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_MotionSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_MotionSample_descriptor_;
}

const msg_MotionSample& msg_MotionSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_MotionSample* msg_MotionSample::default_instance_ = NULL;

msg_MotionSample* msg_MotionSample::New(::google::protobuf::Arena* arena) const {
  msg_MotionSample* n = new msg_MotionSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_MotionSample::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_MotionSample)
  states_.Clear();
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_MotionSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_MotionSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_VehicleState states = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_states;
        if (input->ExpectTag(18)) goto parse_loop_command;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .msg_ControlCommand command = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_command;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_MotionSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_MotionSample)
  return false;
#undef DO_
}

void msg_MotionSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_MotionSample)
  // repeated .msg_VehicleState states = 1;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  // repeated .msg_ControlCommand command = 2;
  for (unsigned int i = 0, n = this->command_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_MotionSample)
}

::google::protobuf::uint8* msg_MotionSample::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_MotionSample)
  // repeated .msg_VehicleState states = 1;
  for (unsigned int i = 0, n = this->states_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->states(i), false, target);
  }

  // repeated .msg_ControlCommand command = 2;
  for (unsigned int i = 0, n = this->command_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->command(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_MotionSample)
  return target;
}

int msg_MotionSample::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_MotionSample)
  int total_size = 0;

  // repeated .msg_VehicleState states = 1;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  // repeated .msg_ControlCommand command = 2;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_MotionSample::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_MotionSample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_MotionSample* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_MotionSample>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_MotionSample)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_MotionSample)
    MergeFrom(*source);
  }
}

void msg_MotionSample::MergeFrom(const msg_MotionSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_MotionSample)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  states_.MergeFrom(from.states_);
  command_.MergeFrom(from.command_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_MotionSample::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_MotionSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_MotionSample::CopyFrom(const msg_MotionSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_MotionSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_MotionSample::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->states())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->command())) return false;
  return true;
}

void msg_MotionSample::Swap(msg_MotionSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_MotionSample::InternalSwap(msg_MotionSample* other) {
  states_.UnsafeArenaSwap(&other->states_);
  command_.UnsafeArenaSwap(&other->command_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_MotionSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_MotionSample_descriptor_;
  metadata.reflection = msg_MotionSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_MotionSample

// repeated .msg_VehicleState states = 1;
int msg_MotionSample::states_size() const {
  return states_.size();
}
void msg_MotionSample::clear_states() {
  states_.Clear();
}
const ::msg_VehicleState& msg_MotionSample::states(int index) const {
  // @@protoc_insertion_point(field_get:msg_MotionSample.states)
  return states_.Get(index);
}
::msg_VehicleState* msg_MotionSample::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:msg_MotionSample.states)
  return states_.Mutable(index);
}
::msg_VehicleState* msg_MotionSample::add_states() {
  // @@protoc_insertion_point(field_add:msg_MotionSample.states)
  return states_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_VehicleState >*
msg_MotionSample::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:msg_MotionSample.states)
  return &states_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_VehicleState >&
msg_MotionSample::states() const {
  // @@protoc_insertion_point(field_list:msg_MotionSample.states)
  return states_;
}

// repeated .msg_ControlCommand command = 2;
int msg_MotionSample::command_size() const {
  return command_.size();
}
void msg_MotionSample::clear_command() {
  command_.Clear();
}
const ::msg_ControlCommand& msg_MotionSample::command(int index) const {
  // @@protoc_insertion_point(field_get:msg_MotionSample.command)
  return command_.Get(index);
}
::msg_ControlCommand* msg_MotionSample::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:msg_MotionSample.command)
  return command_.Mutable(index);
}
::msg_ControlCommand* msg_MotionSample::add_command() {
  // @@protoc_insertion_point(field_add:msg_MotionSample.command)
  return command_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_ControlCommand >*
msg_MotionSample::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:msg_MotionSample.command)
  return &command_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_ControlCommand >&
msg_MotionSample::command() const {
  // @@protoc_insertion_point(field_list:msg_MotionSample.command)
  return command_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_Segments::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_Segments::msg_Segments()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_Segments)
}

void msg_Segments::InitAsDefaultInstance() {
}

msg_Segments::msg_Segments(const msg_Segments& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_Segments)
}

void msg_Segments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_Segments::~msg_Segments() {
  // @@protoc_insertion_point(destructor:msg_Segments)
  SharedDtor();
}

void msg_Segments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msg_Segments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_Segments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_Segments_descriptor_;
}

const msg_Segments& msg_Segments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_Segments* msg_Segments::default_instance_ = NULL;

msg_Segments* msg_Segments::New(::google::protobuf::Arena* arena) const {
  msg_Segments* n = new msg_Segments;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_Segments::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_Segments)
  segments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_Segments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_Segments)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_MotionSample segments = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_segments;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_Segments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_Segments)
  return false;
#undef DO_
}

void msg_Segments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_Segments)
  // repeated .msg_MotionSample segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_Segments)
}

::google::protobuf::uint8* msg_Segments::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_Segments)
  // repeated .msg_MotionSample segments = 1;
  for (unsigned int i = 0, n = this->segments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->segments(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_Segments)
  return target;
}

int msg_Segments::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_Segments)
  int total_size = 0;

  // repeated .msg_MotionSample segments = 1;
  total_size += 1 * this->segments_size();
  for (int i = 0; i < this->segments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_Segments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_Segments)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_Segments* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_Segments>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_Segments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_Segments)
    MergeFrom(*source);
  }
}

void msg_Segments::MergeFrom(const msg_Segments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_Segments)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  segments_.MergeFrom(from.segments_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_Segments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_Segments::CopyFrom(const msg_Segments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_Segments::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->segments())) return false;
  return true;
}

void msg_Segments::Swap(msg_Segments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_Segments::InternalSwap(msg_Segments* other) {
  segments_.UnsafeArenaSwap(&other->segments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_Segments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_Segments_descriptor_;
  metadata.reflection = msg_Segments_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_Segments

// repeated .msg_MotionSample segments = 1;
int msg_Segments::segments_size() const {
  return segments_.size();
}
void msg_Segments::clear_segments() {
  segments_.Clear();
}
const ::msg_MotionSample& msg_Segments::segments(int index) const {
  // @@protoc_insertion_point(field_get:msg_Segments.segments)
  return segments_.Get(index);
}
::msg_MotionSample* msg_Segments::mutable_segments(int index) {
  // @@protoc_insertion_point(field_mutable:msg_Segments.segments)
  return segments_.Mutable(index);
}
::msg_MotionSample* msg_Segments::add_segments() {
  // @@protoc_insertion_point(field_add:msg_Segments.segments)
  return segments_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_MotionSample >*
msg_Segments::mutable_segments() {
  // @@protoc_insertion_point(field_mutable_list:msg_Segments.segments)
  return &segments_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_MotionSample >&
msg_Segments::segments() const {
  // @@protoc_insertion_point(field_list:msg_Segments.segments)
  return segments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_ControlPlan::kStartTimeFieldNumber;
const int msg_ControlPlan::kEndTimeFieldNumber;
const int msg_ControlPlan::kSampleFieldNumber;
const int msg_ControlPlan::kStartStateFieldNumber;
const int msg_ControlPlan::kEndStateFieldNumber;
const int msg_ControlPlan::kStartSampleIndexFieldNumber;
const int msg_ControlPlan::kStartSegmentIndexFieldNumber;
const int msg_ControlPlan::kEndSampleIndexFieldNumber;
const int msg_ControlPlan::kEndSegmentIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_ControlPlan::msg_ControlPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_ControlPlan)
}

void msg_ControlPlan::InitAsDefaultInstance() {
  sample_ = const_cast< ::msg_MotionSample*>(&::msg_MotionSample::default_instance());
  startstate_ = const_cast< ::msg_VehicleState*>(&::msg_VehicleState::default_instance());
  endstate_ = const_cast< ::msg_VehicleState*>(&::msg_VehicleState::default_instance());
}

msg_ControlPlan::msg_ControlPlan(const msg_ControlPlan& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_ControlPlan)
}

void msg_ControlPlan::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  sample_ = NULL;
  startstate_ = NULL;
  endstate_ = NULL;
  startsampleindex_ = 0;
  startsegmentindex_ = 0;
  endsampleindex_ = 0;
  endsegmentindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ControlPlan::~msg_ControlPlan() {
  // @@protoc_insertion_point(destructor:msg_ControlPlan)
  SharedDtor();
}

void msg_ControlPlan::SharedDtor() {
  if (this != default_instance_) {
    delete sample_;
    delete startstate_;
    delete endstate_;
  }
}

void msg_ControlPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ControlPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ControlPlan_descriptor_;
}

const msg_ControlPlan& msg_ControlPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_ControlPlan* msg_ControlPlan::default_instance_ = NULL;

msg_ControlPlan* msg_ControlPlan::New(::google::protobuf::Arena* arena) const {
  msg_ControlPlan* n = new msg_ControlPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_ControlPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_ControlPlan)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_ControlPlan, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_ControlPlan*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(starttime_, endtime_);
    ZR_(startsampleindex_, endsampleindex_);
    if (has_sample()) {
      if (sample_ != NULL) sample_->::msg_MotionSample::Clear();
    }
    if (has_startstate()) {
      if (startstate_ != NULL) startstate_->::msg_VehicleState::Clear();
    }
    if (has_endstate()) {
      if (endstate_ != NULL) endstate_->::msg_VehicleState::Clear();
    }
  }
  endsegmentindex_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_ControlPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_ControlPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double startTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_endTime;
        break;
      }

      // required double endTime = 2;
      case 2: {
        if (tag == 17) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sample;
        break;
      }

      // required .msg_MotionSample sample = 3;
      case 3: {
        if (tag == 26) {
         parse_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sample()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startState;
        break;
      }

      // required .msg_VehicleState startState = 4;
      case 4: {
        if (tag == 34) {
         parse_startState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_endState;
        break;
      }

      // required .msg_VehicleState endState = 5;
      case 5: {
        if (tag == 42) {
         parse_endState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_startSampleIndex;
        break;
      }

      // required int32 startSampleIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_startSampleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startsampleindex_)));
          set_has_startsampleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_startSegmentIndex;
        break;
      }

      // required int32 startSegmentIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_startSegmentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startsegmentindex_)));
          set_has_startsegmentindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_endSampleIndex;
        break;
      }

      // required int32 endSampleIndex = 8;
      case 8: {
        if (tag == 64) {
         parse_endSampleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endsampleindex_)));
          set_has_endsampleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endSegmentIndex;
        break;
      }

      // required int32 endSegmentIndex = 9;
      case 9: {
        if (tag == 72) {
         parse_endSegmentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endsegmentindex_)));
          set_has_endsegmentindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_ControlPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_ControlPlan)
  return false;
#undef DO_
}

void msg_ControlPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_ControlPlan)
  // required double startTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->starttime(), output);
  }

  // required double endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->endtime(), output);
  }

  // required .msg_MotionSample sample = 3;
  if (has_sample()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sample_, output);
  }

  // required .msg_VehicleState startState = 4;
  if (has_startstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->startstate_, output);
  }

  // required .msg_VehicleState endState = 5;
  if (has_endstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->endstate_, output);
  }

  // required int32 startSampleIndex = 6;
  if (has_startsampleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->startsampleindex(), output);
  }

  // required int32 startSegmentIndex = 7;
  if (has_startsegmentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->startsegmentindex(), output);
  }

  // required int32 endSampleIndex = 8;
  if (has_endsampleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->endsampleindex(), output);
  }

  // required int32 endSegmentIndex = 9;
  if (has_endsegmentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->endsegmentindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_ControlPlan)
}

::google::protobuf::uint8* msg_ControlPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_ControlPlan)
  // required double startTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->starttime(), target);
  }

  // required double endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->endtime(), target);
  }

  // required .msg_MotionSample sample = 3;
  if (has_sample()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sample_, false, target);
  }

  // required .msg_VehicleState startState = 4;
  if (has_startstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->startstate_, false, target);
  }

  // required .msg_VehicleState endState = 5;
  if (has_endstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->endstate_, false, target);
  }

  // required int32 startSampleIndex = 6;
  if (has_startsampleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->startsampleindex(), target);
  }

  // required int32 startSegmentIndex = 7;
  if (has_startsegmentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->startsegmentindex(), target);
  }

  // required int32 endSampleIndex = 8;
  if (has_endsampleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->endsampleindex(), target);
  }

  // required int32 endSegmentIndex = 9;
  if (has_endsegmentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->endsegmentindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_ControlPlan)
  return target;
}

int msg_ControlPlan::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_ControlPlan)
  int total_size = 0;

  if (has_starttime()) {
    // required double startTime = 1;
    total_size += 1 + 8;
  }

  if (has_endtime()) {
    // required double endTime = 2;
    total_size += 1 + 8;
  }

  if (has_sample()) {
    // required .msg_MotionSample sample = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sample_);
  }

  if (has_startstate()) {
    // required .msg_VehicleState startState = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startstate_);
  }

  if (has_endstate()) {
    // required .msg_VehicleState endState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endstate_);
  }

  if (has_startsampleindex()) {
    // required int32 startSampleIndex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startsampleindex());
  }

  if (has_startsegmentindex()) {
    // required int32 startSegmentIndex = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startsegmentindex());
  }

  if (has_endsampleindex()) {
    // required int32 endSampleIndex = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endsampleindex());
  }

  if (has_endsegmentindex()) {
    // required int32 endSegmentIndex = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endsegmentindex());
  }

  return total_size;
}
int msg_ControlPlan::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_ControlPlan)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required double startTime = 1;
    total_size += 1 + 8;

    // required double endTime = 2;
    total_size += 1 + 8;

    // required .msg_MotionSample sample = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sample_);

    // required .msg_VehicleState startState = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->startstate_);

    // required .msg_VehicleState endState = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endstate_);

    // required int32 startSampleIndex = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startsampleindex());

    // required int32 startSegmentIndex = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startsegmentindex());

    // required int32 endSampleIndex = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endsampleindex());

    // required int32 endSegmentIndex = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endsegmentindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ControlPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_ControlPlan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_ControlPlan* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_ControlPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_ControlPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_ControlPlan)
    MergeFrom(*source);
  }
}

void msg_ControlPlan::MergeFrom(const msg_ControlPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_ControlPlan)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_sample()) {
      mutable_sample()->::msg_MotionSample::MergeFrom(from.sample());
    }
    if (from.has_startstate()) {
      mutable_startstate()->::msg_VehicleState::MergeFrom(from.startstate());
    }
    if (from.has_endstate()) {
      mutable_endstate()->::msg_VehicleState::MergeFrom(from.endstate());
    }
    if (from.has_startsampleindex()) {
      set_startsampleindex(from.startsampleindex());
    }
    if (from.has_startsegmentindex()) {
      set_startsegmentindex(from.startsegmentindex());
    }
    if (from.has_endsampleindex()) {
      set_endsampleindex(from.endsampleindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endsegmentindex()) {
      set_endsegmentindex(from.endsegmentindex());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_ControlPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_ControlPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ControlPlan::CopyFrom(const msg_ControlPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_ControlPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ControlPlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_sample()) {
    if (!this->sample_->IsInitialized()) return false;
  }
  if (has_startstate()) {
    if (!this->startstate_->IsInitialized()) return false;
  }
  if (has_endstate()) {
    if (!this->endstate_->IsInitialized()) return false;
  }
  return true;
}

void msg_ControlPlan::Swap(msg_ControlPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_ControlPlan::InternalSwap(msg_ControlPlan* other) {
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(sample_, other->sample_);
  std::swap(startstate_, other->startstate_);
  std::swap(endstate_, other->endstate_);
  std::swap(startsampleindex_, other->startsampleindex_);
  std::swap(startsegmentindex_, other->startsegmentindex_);
  std::swap(endsampleindex_, other->endsampleindex_);
  std::swap(endsegmentindex_, other->endsegmentindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_ControlPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ControlPlan_descriptor_;
  metadata.reflection = msg_ControlPlan_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_ControlPlan

// required double startTime = 1;
bool msg_ControlPlan::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_ControlPlan::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_ControlPlan::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_ControlPlan::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
 double msg_ControlPlan::starttime() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.startTime)
  return starttime_;
}
 void msg_ControlPlan::set_starttime(double value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.startTime)
}

// required double endTime = 2;
bool msg_ControlPlan::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_ControlPlan::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_ControlPlan::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_ControlPlan::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
 double msg_ControlPlan::endtime() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.endTime)
  return endtime_;
}
 void msg_ControlPlan::set_endtime(double value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.endTime)
}

// required .msg_MotionSample sample = 3;
bool msg_ControlPlan::has_sample() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_ControlPlan::set_has_sample() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_ControlPlan::clear_has_sample() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_ControlPlan::clear_sample() {
  if (sample_ != NULL) sample_->::msg_MotionSample::Clear();
  clear_has_sample();
}
const ::msg_MotionSample& msg_ControlPlan::sample() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.sample)
  return sample_ != NULL ? *sample_ : *default_instance_->sample_;
}
::msg_MotionSample* msg_ControlPlan::mutable_sample() {
  set_has_sample();
  if (sample_ == NULL) {
    sample_ = new ::msg_MotionSample;
  }
  // @@protoc_insertion_point(field_mutable:msg_ControlPlan.sample)
  return sample_;
}
::msg_MotionSample* msg_ControlPlan::release_sample() {
  // @@protoc_insertion_point(field_release:msg_ControlPlan.sample)
  clear_has_sample();
  ::msg_MotionSample* temp = sample_;
  sample_ = NULL;
  return temp;
}
void msg_ControlPlan::set_allocated_sample(::msg_MotionSample* sample) {
  delete sample_;
  sample_ = sample;
  if (sample) {
    set_has_sample();
  } else {
    clear_has_sample();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ControlPlan.sample)
}

// required .msg_VehicleState startState = 4;
bool msg_ControlPlan::has_startstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void msg_ControlPlan::set_has_startstate() {
  _has_bits_[0] |= 0x00000008u;
}
void msg_ControlPlan::clear_has_startstate() {
  _has_bits_[0] &= ~0x00000008u;
}
void msg_ControlPlan::clear_startstate() {
  if (startstate_ != NULL) startstate_->::msg_VehicleState::Clear();
  clear_has_startstate();
}
const ::msg_VehicleState& msg_ControlPlan::startstate() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.startState)
  return startstate_ != NULL ? *startstate_ : *default_instance_->startstate_;
}
::msg_VehicleState* msg_ControlPlan::mutable_startstate() {
  set_has_startstate();
  if (startstate_ == NULL) {
    startstate_ = new ::msg_VehicleState;
  }
  // @@protoc_insertion_point(field_mutable:msg_ControlPlan.startState)
  return startstate_;
}
::msg_VehicleState* msg_ControlPlan::release_startstate() {
  // @@protoc_insertion_point(field_release:msg_ControlPlan.startState)
  clear_has_startstate();
  ::msg_VehicleState* temp = startstate_;
  startstate_ = NULL;
  return temp;
}
void msg_ControlPlan::set_allocated_startstate(::msg_VehicleState* startstate) {
  delete startstate_;
  startstate_ = startstate;
  if (startstate) {
    set_has_startstate();
  } else {
    clear_has_startstate();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ControlPlan.startState)
}

// required .msg_VehicleState endState = 5;
bool msg_ControlPlan::has_endstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void msg_ControlPlan::set_has_endstate() {
  _has_bits_[0] |= 0x00000010u;
}
void msg_ControlPlan::clear_has_endstate() {
  _has_bits_[0] &= ~0x00000010u;
}
void msg_ControlPlan::clear_endstate() {
  if (endstate_ != NULL) endstate_->::msg_VehicleState::Clear();
  clear_has_endstate();
}
const ::msg_VehicleState& msg_ControlPlan::endstate() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.endState)
  return endstate_ != NULL ? *endstate_ : *default_instance_->endstate_;
}
::msg_VehicleState* msg_ControlPlan::mutable_endstate() {
  set_has_endstate();
  if (endstate_ == NULL) {
    endstate_ = new ::msg_VehicleState;
  }
  // @@protoc_insertion_point(field_mutable:msg_ControlPlan.endState)
  return endstate_;
}
::msg_VehicleState* msg_ControlPlan::release_endstate() {
  // @@protoc_insertion_point(field_release:msg_ControlPlan.endState)
  clear_has_endstate();
  ::msg_VehicleState* temp = endstate_;
  endstate_ = NULL;
  return temp;
}
void msg_ControlPlan::set_allocated_endstate(::msg_VehicleState* endstate) {
  delete endstate_;
  endstate_ = endstate;
  if (endstate) {
    set_has_endstate();
  } else {
    clear_has_endstate();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ControlPlan.endState)
}

// required int32 startSampleIndex = 6;
bool msg_ControlPlan::has_startsampleindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void msg_ControlPlan::set_has_startsampleindex() {
  _has_bits_[0] |= 0x00000020u;
}
void msg_ControlPlan::clear_has_startsampleindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void msg_ControlPlan::clear_startsampleindex() {
  startsampleindex_ = 0;
  clear_has_startsampleindex();
}
 ::google::protobuf::int32 msg_ControlPlan::startsampleindex() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.startSampleIndex)
  return startsampleindex_;
}
 void msg_ControlPlan::set_startsampleindex(::google::protobuf::int32 value) {
  set_has_startsampleindex();
  startsampleindex_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.startSampleIndex)
}

// required int32 startSegmentIndex = 7;
bool msg_ControlPlan::has_startsegmentindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void msg_ControlPlan::set_has_startsegmentindex() {
  _has_bits_[0] |= 0x00000040u;
}
void msg_ControlPlan::clear_has_startsegmentindex() {
  _has_bits_[0] &= ~0x00000040u;
}
void msg_ControlPlan::clear_startsegmentindex() {
  startsegmentindex_ = 0;
  clear_has_startsegmentindex();
}
 ::google::protobuf::int32 msg_ControlPlan::startsegmentindex() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.startSegmentIndex)
  return startsegmentindex_;
}
 void msg_ControlPlan::set_startsegmentindex(::google::protobuf::int32 value) {
  set_has_startsegmentindex();
  startsegmentindex_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.startSegmentIndex)
}

// required int32 endSampleIndex = 8;
bool msg_ControlPlan::has_endsampleindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void msg_ControlPlan::set_has_endsampleindex() {
  _has_bits_[0] |= 0x00000080u;
}
void msg_ControlPlan::clear_has_endsampleindex() {
  _has_bits_[0] &= ~0x00000080u;
}
void msg_ControlPlan::clear_endsampleindex() {
  endsampleindex_ = 0;
  clear_has_endsampleindex();
}
 ::google::protobuf::int32 msg_ControlPlan::endsampleindex() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.endSampleIndex)
  return endsampleindex_;
}
 void msg_ControlPlan::set_endsampleindex(::google::protobuf::int32 value) {
  set_has_endsampleindex();
  endsampleindex_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.endSampleIndex)
}

// required int32 endSegmentIndex = 9;
bool msg_ControlPlan::has_endsegmentindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void msg_ControlPlan::set_has_endsegmentindex() {
  _has_bits_[0] |= 0x00000100u;
}
void msg_ControlPlan::clear_has_endsegmentindex() {
  _has_bits_[0] &= ~0x00000100u;
}
void msg_ControlPlan::clear_endsegmentindex() {
  endsegmentindex_ = 0;
  clear_has_endsegmentindex();
}
 ::google::protobuf::int32 msg_ControlPlan::endsegmentindex() const {
  // @@protoc_insertion_point(field_get:msg_ControlPlan.endSegmentIndex)
  return endsegmentindex_;
}
 void msg_ControlPlan::set_endsegmentindex(::google::protobuf::int32 value) {
  set_has_endsegmentindex();
  endsegmentindex_ = value;
  // @@protoc_insertion_point(field_set:msg_ControlPlan.endSegmentIndex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_ImuLog::kSystemTimeFieldNumber;
const int msg_ImuLog::kDeviceTimeFieldNumber;
const int msg_ImuLog::kAccelFieldNumber;
const int msg_ImuLog::kGyroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_ImuLog::msg_ImuLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_ImuLog)
}

void msg_ImuLog::InitAsDefaultInstance() {
  accel_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
  gyro_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
}

msg_ImuLog::msg_ImuLog(const msg_ImuLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_ImuLog)
}

void msg_ImuLog::SharedCtor() {
  _cached_size_ = 0;
  systemtime_ = 0;
  devicetime_ = 0;
  accel_ = NULL;
  gyro_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_ImuLog::~msg_ImuLog() {
  // @@protoc_insertion_point(destructor:msg_ImuLog)
  SharedDtor();
}

void msg_ImuLog::SharedDtor() {
  if (this != default_instance_) {
    delete accel_;
    delete gyro_;
  }
}

void msg_ImuLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_ImuLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_ImuLog_descriptor_;
}

const msg_ImuLog& msg_ImuLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_ImuLog* msg_ImuLog::default_instance_ = NULL;

msg_ImuLog* msg_ImuLog::New(::google::protobuf::Arena* arena) const {
  msg_ImuLog* n = new msg_ImuLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_ImuLog::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_ImuLog)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_ImuLog, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_ImuLog*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(systemtime_, devicetime_);
    if (has_accel()) {
      if (accel_ != NULL) accel_->::msg_Matrix::Clear();
    }
    if (has_gyro()) {
      if (gyro_ != NULL) gyro_->::msg_Matrix::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_ImuLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_ImuLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double systemTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &systemtime_)));
          set_has_systemtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_deviceTime;
        break;
      }

      // required double deviceTime = 2;
      case 2: {
        if (tag == 17) {
         parse_deviceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &devicetime_)));
          set_has_devicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_accel;
        break;
      }

      // required .msg_Matrix accel = 3;
      case 3: {
        if (tag == 26) {
         parse_accel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gyro;
        break;
      }

      // required .msg_Matrix gyro = 4;
      case 4: {
        if (tag == 34) {
         parse_gyro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyro()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_ImuLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_ImuLog)
  return false;
#undef DO_
}

void msg_ImuLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_ImuLog)
  // required double systemTime = 1;
  if (has_systemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->systemtime(), output);
  }

  // required double deviceTime = 2;
  if (has_devicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->devicetime(), output);
  }

  // required .msg_Matrix accel = 3;
  if (has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->accel_, output);
  }

  // required .msg_Matrix gyro = 4;
  if (has_gyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gyro_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_ImuLog)
}

::google::protobuf::uint8* msg_ImuLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_ImuLog)
  // required double systemTime = 1;
  if (has_systemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->systemtime(), target);
  }

  // required double deviceTime = 2;
  if (has_devicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->devicetime(), target);
  }

  // required .msg_Matrix accel = 3;
  if (has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->accel_, false, target);
  }

  // required .msg_Matrix gyro = 4;
  if (has_gyro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gyro_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_ImuLog)
  return target;
}

int msg_ImuLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_ImuLog)
  int total_size = 0;

  if (has_systemtime()) {
    // required double systemTime = 1;
    total_size += 1 + 8;
  }

  if (has_devicetime()) {
    // required double deviceTime = 2;
    total_size += 1 + 8;
  }

  if (has_accel()) {
    // required .msg_Matrix accel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);
  }

  if (has_gyro()) {
    // required .msg_Matrix gyro = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyro_);
  }

  return total_size;
}
int msg_ImuLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_ImuLog)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double systemTime = 1;
    total_size += 1 + 8;

    // required double deviceTime = 2;
    total_size += 1 + 8;

    // required .msg_Matrix accel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);

    // required .msg_Matrix gyro = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyro_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_ImuLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_ImuLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_ImuLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_ImuLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_ImuLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_ImuLog)
    MergeFrom(*source);
  }
}

void msg_ImuLog::MergeFrom(const msg_ImuLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_ImuLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemtime()) {
      set_systemtime(from.systemtime());
    }
    if (from.has_devicetime()) {
      set_devicetime(from.devicetime());
    }
    if (from.has_accel()) {
      mutable_accel()->::msg_Matrix::MergeFrom(from.accel());
    }
    if (from.has_gyro()) {
      mutable_gyro()->::msg_Matrix::MergeFrom(from.gyro());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_ImuLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_ImuLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_ImuLog::CopyFrom(const msg_ImuLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_ImuLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_ImuLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_accel()) {
    if (!this->accel_->IsInitialized()) return false;
  }
  if (has_gyro()) {
    if (!this->gyro_->IsInitialized()) return false;
  }
  return true;
}

void msg_ImuLog::Swap(msg_ImuLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_ImuLog::InternalSwap(msg_ImuLog* other) {
  std::swap(systemtime_, other->systemtime_);
  std::swap(devicetime_, other->devicetime_);
  std::swap(accel_, other->accel_);
  std::swap(gyro_, other->gyro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_ImuLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_ImuLog_descriptor_;
  metadata.reflection = msg_ImuLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_ImuLog

// required double systemTime = 1;
bool msg_ImuLog::has_systemtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_ImuLog::set_has_systemtime() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_ImuLog::clear_has_systemtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_ImuLog::clear_systemtime() {
  systemtime_ = 0;
  clear_has_systemtime();
}
 double msg_ImuLog::systemtime() const {
  // @@protoc_insertion_point(field_get:msg_ImuLog.systemTime)
  return systemtime_;
}
 void msg_ImuLog::set_systemtime(double value) {
  set_has_systemtime();
  systemtime_ = value;
  // @@protoc_insertion_point(field_set:msg_ImuLog.systemTime)
}

// required double deviceTime = 2;
bool msg_ImuLog::has_devicetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_ImuLog::set_has_devicetime() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_ImuLog::clear_has_devicetime() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_ImuLog::clear_devicetime() {
  devicetime_ = 0;
  clear_has_devicetime();
}
 double msg_ImuLog::devicetime() const {
  // @@protoc_insertion_point(field_get:msg_ImuLog.deviceTime)
  return devicetime_;
}
 void msg_ImuLog::set_devicetime(double value) {
  set_has_devicetime();
  devicetime_ = value;
  // @@protoc_insertion_point(field_set:msg_ImuLog.deviceTime)
}

// required .msg_Matrix accel = 3;
bool msg_ImuLog::has_accel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_ImuLog::set_has_accel() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_ImuLog::clear_has_accel() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_ImuLog::clear_accel() {
  if (accel_ != NULL) accel_->::msg_Matrix::Clear();
  clear_has_accel();
}
const ::msg_Matrix& msg_ImuLog::accel() const {
  // @@protoc_insertion_point(field_get:msg_ImuLog.accel)
  return accel_ != NULL ? *accel_ : *default_instance_->accel_;
}
::msg_Matrix* msg_ImuLog::mutable_accel() {
  set_has_accel();
  if (accel_ == NULL) {
    accel_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_ImuLog.accel)
  return accel_;
}
::msg_Matrix* msg_ImuLog::release_accel() {
  // @@protoc_insertion_point(field_release:msg_ImuLog.accel)
  clear_has_accel();
  ::msg_Matrix* temp = accel_;
  accel_ = NULL;
  return temp;
}
void msg_ImuLog::set_allocated_accel(::msg_Matrix* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    set_has_accel();
  } else {
    clear_has_accel();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ImuLog.accel)
}

// required .msg_Matrix gyro = 4;
bool msg_ImuLog::has_gyro() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void msg_ImuLog::set_has_gyro() {
  _has_bits_[0] |= 0x00000008u;
}
void msg_ImuLog::clear_has_gyro() {
  _has_bits_[0] &= ~0x00000008u;
}
void msg_ImuLog::clear_gyro() {
  if (gyro_ != NULL) gyro_->::msg_Matrix::Clear();
  clear_has_gyro();
}
const ::msg_Matrix& msg_ImuLog::gyro() const {
  // @@protoc_insertion_point(field_get:msg_ImuLog.gyro)
  return gyro_ != NULL ? *gyro_ : *default_instance_->gyro_;
}
::msg_Matrix* msg_ImuLog::mutable_gyro() {
  set_has_gyro();
  if (gyro_ == NULL) {
    gyro_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_ImuLog.gyro)
  return gyro_;
}
::msg_Matrix* msg_ImuLog::release_gyro() {
  // @@protoc_insertion_point(field_release:msg_ImuLog.gyro)
  clear_has_gyro();
  ::msg_Matrix* temp = gyro_;
  gyro_ = NULL;
  return temp;
}
void msg_ImuLog::set_allocated_gyro(::msg_Matrix* gyro) {
  delete gyro_;
  gyro_ = gyro;
  if (gyro) {
    set_has_gyro();
  } else {
    clear_has_gyro();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_ImuLog.gyro)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_LocalizerLog::kSystemTimeFieldNumber;
const int msg_LocalizerLog::kDeviceTimeFieldNumber;
const int msg_LocalizerLog::kPose7DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_LocalizerLog::msg_LocalizerLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_LocalizerLog)
}

void msg_LocalizerLog::InitAsDefaultInstance() {
  pose_7d_ = const_cast< ::msg_Matrix*>(&::msg_Matrix::default_instance());
}

msg_LocalizerLog::msg_LocalizerLog(const msg_LocalizerLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_LocalizerLog)
}

void msg_LocalizerLog::SharedCtor() {
  _cached_size_ = 0;
  systemtime_ = 0;
  devicetime_ = 0;
  pose_7d_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_LocalizerLog::~msg_LocalizerLog() {
  // @@protoc_insertion_point(destructor:msg_LocalizerLog)
  SharedDtor();
}

void msg_LocalizerLog::SharedDtor() {
  if (this != default_instance_) {
    delete pose_7d_;
  }
}

void msg_LocalizerLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_LocalizerLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_LocalizerLog_descriptor_;
}

const msg_LocalizerLog& msg_LocalizerLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_LocalizerLog* msg_LocalizerLog::default_instance_ = NULL;

msg_LocalizerLog* msg_LocalizerLog::New(::google::protobuf::Arena* arena) const {
  msg_LocalizerLog* n = new msg_LocalizerLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_LocalizerLog::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_LocalizerLog)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(msg_LocalizerLog, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<msg_LocalizerLog*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(systemtime_, devicetime_);
    if (has_pose_7d()) {
      if (pose_7d_ != NULL) pose_7d_->::msg_Matrix::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_LocalizerLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_LocalizerLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double systemTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &systemtime_)));
          set_has_systemtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_deviceTime;
        break;
      }

      // required double deviceTime = 2;
      case 2: {
        if (tag == 17) {
         parse_deviceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &devicetime_)));
          set_has_devicetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose_7d;
        break;
      }

      // required .msg_Matrix pose_7d = 3;
      case 3: {
        if (tag == 26) {
         parse_pose_7d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_7d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_LocalizerLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_LocalizerLog)
  return false;
#undef DO_
}

void msg_LocalizerLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_LocalizerLog)
  // required double systemTime = 1;
  if (has_systemtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->systemtime(), output);
  }

  // required double deviceTime = 2;
  if (has_devicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->devicetime(), output);
  }

  // required .msg_Matrix pose_7d = 3;
  if (has_pose_7d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_7d_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_LocalizerLog)
}

::google::protobuf::uint8* msg_LocalizerLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_LocalizerLog)
  // required double systemTime = 1;
  if (has_systemtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->systemtime(), target);
  }

  // required double deviceTime = 2;
  if (has_devicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->devicetime(), target);
  }

  // required .msg_Matrix pose_7d = 3;
  if (has_pose_7d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_7d_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_LocalizerLog)
  return target;
}

int msg_LocalizerLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_LocalizerLog)
  int total_size = 0;

  if (has_systemtime()) {
    // required double systemTime = 1;
    total_size += 1 + 8;
  }

  if (has_devicetime()) {
    // required double deviceTime = 2;
    total_size += 1 + 8;
  }

  if (has_pose_7d()) {
    // required .msg_Matrix pose_7d = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_7d_);
  }

  return total_size;
}
int msg_LocalizerLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_LocalizerLog)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double systemTime = 1;
    total_size += 1 + 8;

    // required double deviceTime = 2;
    total_size += 1 + 8;

    // required .msg_Matrix pose_7d = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_7d_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_LocalizerLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_LocalizerLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_LocalizerLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_LocalizerLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_LocalizerLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_LocalizerLog)
    MergeFrom(*source);
  }
}

void msg_LocalizerLog::MergeFrom(const msg_LocalizerLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_LocalizerLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemtime()) {
      set_systemtime(from.systemtime());
    }
    if (from.has_devicetime()) {
      set_devicetime(from.devicetime());
    }
    if (from.has_pose_7d()) {
      mutable_pose_7d()->::msg_Matrix::MergeFrom(from.pose_7d());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_LocalizerLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_LocalizerLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_LocalizerLog::CopyFrom(const msg_LocalizerLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_LocalizerLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_LocalizerLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pose_7d()) {
    if (!this->pose_7d_->IsInitialized()) return false;
  }
  return true;
}

void msg_LocalizerLog::Swap(msg_LocalizerLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_LocalizerLog::InternalSwap(msg_LocalizerLog* other) {
  std::swap(systemtime_, other->systemtime_);
  std::swap(devicetime_, other->devicetime_);
  std::swap(pose_7d_, other->pose_7d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_LocalizerLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_LocalizerLog_descriptor_;
  metadata.reflection = msg_LocalizerLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_LocalizerLog

// required double systemTime = 1;
bool msg_LocalizerLog::has_systemtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_LocalizerLog::set_has_systemtime() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_LocalizerLog::clear_has_systemtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_LocalizerLog::clear_systemtime() {
  systemtime_ = 0;
  clear_has_systemtime();
}
 double msg_LocalizerLog::systemtime() const {
  // @@protoc_insertion_point(field_get:msg_LocalizerLog.systemTime)
  return systemtime_;
}
 void msg_LocalizerLog::set_systemtime(double value) {
  set_has_systemtime();
  systemtime_ = value;
  // @@protoc_insertion_point(field_set:msg_LocalizerLog.systemTime)
}

// required double deviceTime = 2;
bool msg_LocalizerLog::has_devicetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_LocalizerLog::set_has_devicetime() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_LocalizerLog::clear_has_devicetime() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_LocalizerLog::clear_devicetime() {
  devicetime_ = 0;
  clear_has_devicetime();
}
 double msg_LocalizerLog::devicetime() const {
  // @@protoc_insertion_point(field_get:msg_LocalizerLog.deviceTime)
  return devicetime_;
}
 void msg_LocalizerLog::set_devicetime(double value) {
  set_has_devicetime();
  devicetime_ = value;
  // @@protoc_insertion_point(field_set:msg_LocalizerLog.deviceTime)
}

// required .msg_Matrix pose_7d = 3;
bool msg_LocalizerLog::has_pose_7d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_LocalizerLog::set_has_pose_7d() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_LocalizerLog::clear_has_pose_7d() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_LocalizerLog::clear_pose_7d() {
  if (pose_7d_ != NULL) pose_7d_->::msg_Matrix::Clear();
  clear_has_pose_7d();
}
const ::msg_Matrix& msg_LocalizerLog::pose_7d() const {
  // @@protoc_insertion_point(field_get:msg_LocalizerLog.pose_7d)
  return pose_7d_ != NULL ? *pose_7d_ : *default_instance_->pose_7d_;
}
::msg_Matrix* msg_LocalizerLog::mutable_pose_7d() {
  set_has_pose_7d();
  if (pose_7d_ == NULL) {
    pose_7d_ = new ::msg_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:msg_LocalizerLog.pose_7d)
  return pose_7d_;
}
::msg_Matrix* msg_LocalizerLog::release_pose_7d() {
  // @@protoc_insertion_point(field_release:msg_LocalizerLog.pose_7d)
  clear_has_pose_7d();
  ::msg_Matrix* temp = pose_7d_;
  pose_7d_ = NULL;
  return temp;
}
void msg_LocalizerLog::set_allocated_pose_7d(::msg_Matrix* pose_7d) {
  delete pose_7d_;
  pose_7d_ = pose_7d;
  if (pose_7d) {
    set_has_pose_7d();
  } else {
    clear_has_pose_7d();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_LocalizerLog.pose_7d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_Log::kTimestampFieldNumber;
const int msg_Log::kVehicleStateFieldNumber;
const int msg_Log::kControlCommandFieldNumber;
const int msg_Log::kControlPlanFieldNumber;
const int msg_Log::kSegmentsFieldNumber;
const int msg_Log::kImuFieldNumber;
const int msg_Log::kLocalizerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_Log::msg_Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_Log)
}

void msg_Log::InitAsDefaultInstance() {
  vehiclestate_ = const_cast< ::msg_VehicleState*>(&::msg_VehicleState::default_instance());
  controlcommand_ = const_cast< ::msg_ControlCommand*>(&::msg_ControlCommand::default_instance());
  controlplan_ = const_cast< ::msg_ControlPlan*>(&::msg_ControlPlan::default_instance());
  segments_ = const_cast< ::msg_Segments*>(&::msg_Segments::default_instance());
  imu_ = const_cast< ::msg_ImuLog*>(&::msg_ImuLog::default_instance());
  localizer_ = const_cast< ::msg_LocalizerLog*>(&::msg_LocalizerLog::default_instance());
}

msg_Log::msg_Log(const msg_Log& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_Log)
}

void msg_Log::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  vehiclestate_ = NULL;
  controlcommand_ = NULL;
  controlplan_ = NULL;
  segments_ = NULL;
  imu_ = NULL;
  localizer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_Log::~msg_Log() {
  // @@protoc_insertion_point(destructor:msg_Log)
  SharedDtor();
}

void msg_Log::SharedDtor() {
  if (this != default_instance_) {
    delete vehiclestate_;
    delete controlcommand_;
    delete controlplan_;
    delete segments_;
    delete imu_;
    delete localizer_;
  }
}

void msg_Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_Log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_Log_descriptor_;
}

const msg_Log& msg_Log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarMessages_2eproto();
  return *default_instance_;
}

msg_Log* msg_Log::default_instance_ = NULL;

msg_Log* msg_Log::New(::google::protobuf::Arena* arena) const {
  msg_Log* n = new msg_Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void msg_Log::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_Log)
  if (_has_bits_[0 / 32] & 127u) {
    timestamp_ = 0;
    if (has_vehiclestate()) {
      if (vehiclestate_ != NULL) vehiclestate_->::msg_VehicleState::Clear();
    }
    if (has_controlcommand()) {
      if (controlcommand_ != NULL) controlcommand_->::msg_ControlCommand::Clear();
    }
    if (has_controlplan()) {
      if (controlplan_ != NULL) controlplan_->::msg_ControlPlan::Clear();
    }
    if (has_segments()) {
      if (segments_ != NULL) segments_->::msg_Segments::Clear();
    }
    if (has_imu()) {
      if (imu_ != NULL) imu_->::msg_ImuLog::Clear();
    }
    if (has_localizer()) {
      if (localizer_ != NULL) localizer_->::msg_LocalizerLog::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool msg_Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vehicleState;
        break;
      }

      // optional .msg_VehicleState vehicleState = 2;
      case 2: {
        if (tag == 18) {
         parse_vehicleState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehiclestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_controlCommand;
        break;
      }

      // optional .msg_ControlCommand controlCommand = 3;
      case 3: {
        if (tag == 26) {
         parse_controlCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controlcommand()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_controlPlan;
        break;
      }

      // optional .msg_ControlPlan controlPlan = 4;
      case 4: {
        if (tag == 34) {
         parse_controlPlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_controlplan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_segments;
        break;
      }

      // optional .msg_Segments segments = 5;
      case 5: {
        if (tag == 42) {
         parse_segments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imu;
        break;
      }

      // optional .msg_ImuLog imu = 6;
      case 6: {
        if (tag == 50) {
         parse_imu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_localizer;
        break;
      }

      // optional .msg_LocalizerLog localizer = 7;
      case 7: {
        if (tag == 58) {
         parse_localizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localizer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_Log)
  return false;
#undef DO_
}

void msg_Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_Log)
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional .msg_VehicleState vehicleState = 2;
  if (has_vehiclestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehiclestate_, output);
  }

  // optional .msg_ControlCommand controlCommand = 3;
  if (has_controlcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->controlcommand_, output);
  }

  // optional .msg_ControlPlan controlPlan = 4;
  if (has_controlplan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->controlplan_, output);
  }

  // optional .msg_Segments segments = 5;
  if (has_segments()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->segments_, output);
  }

  // optional .msg_ImuLog imu = 6;
  if (has_imu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->imu_, output);
  }

  // optional .msg_LocalizerLog localizer = 7;
  if (has_localizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->localizer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_Log)
}

::google::protobuf::uint8* msg_Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_Log)
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional .msg_VehicleState vehicleState = 2;
  if (has_vehiclestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->vehiclestate_, false, target);
  }

  // optional .msg_ControlCommand controlCommand = 3;
  if (has_controlcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->controlcommand_, false, target);
  }

  // optional .msg_ControlPlan controlPlan = 4;
  if (has_controlplan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->controlplan_, false, target);
  }

  // optional .msg_Segments segments = 5;
  if (has_segments()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->segments_, false, target);
  }

  // optional .msg_ImuLog imu = 6;
  if (has_imu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->imu_, false, target);
  }

  // optional .msg_LocalizerLog localizer = 7;
  if (has_localizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->localizer_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_Log)
  return target;
}

int msg_Log::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_Log)
  int total_size = 0;

  // required double timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 + 8;
  }
  if (_has_bits_[1 / 32] & 126u) {
    // optional .msg_VehicleState vehicleState = 2;
    if (has_vehiclestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehiclestate_);
    }

    // optional .msg_ControlCommand controlCommand = 3;
    if (has_controlcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->controlcommand_);
    }

    // optional .msg_ControlPlan controlPlan = 4;
    if (has_controlplan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->controlplan_);
    }

    // optional .msg_Segments segments = 5;
    if (has_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->segments_);
    }

    // optional .msg_ImuLog imu = 6;
    if (has_imu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imu_);
    }

    // optional .msg_LocalizerLog localizer = 7;
    if (has_localizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localizer_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_Log)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const msg_Log* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const msg_Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_Log)
    MergeFrom(*source);
  }
}

void msg_Log::MergeFrom(const msg_Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_Log)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_vehiclestate()) {
      mutable_vehiclestate()->::msg_VehicleState::MergeFrom(from.vehiclestate());
    }
    if (from.has_controlcommand()) {
      mutable_controlcommand()->::msg_ControlCommand::MergeFrom(from.controlcommand());
    }
    if (from.has_controlplan()) {
      mutable_controlplan()->::msg_ControlPlan::MergeFrom(from.controlplan());
    }
    if (from.has_segments()) {
      mutable_segments()->::msg_Segments::MergeFrom(from.segments());
    }
    if (from.has_imu()) {
      mutable_imu()->::msg_ImuLog::MergeFrom(from.imu());
    }
    if (from.has_localizer()) {
      mutable_localizer()->::msg_LocalizerLog::MergeFrom(from.localizer());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void msg_Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_Log::CopyFrom(const msg_Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_Log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vehiclestate()) {
    if (!this->vehiclestate_->IsInitialized()) return false;
  }
  if (has_controlcommand()) {
    if (!this->controlcommand_->IsInitialized()) return false;
  }
  if (has_controlplan()) {
    if (!this->controlplan_->IsInitialized()) return false;
  }
  if (has_segments()) {
    if (!this->segments_->IsInitialized()) return false;
  }
  if (has_imu()) {
    if (!this->imu_->IsInitialized()) return false;
  }
  if (has_localizer()) {
    if (!this->localizer_->IsInitialized()) return false;
  }
  return true;
}

void msg_Log::Swap(msg_Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_Log::InternalSwap(msg_Log* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(vehiclestate_, other->vehiclestate_);
  std::swap(controlcommand_, other->controlcommand_);
  std::swap(controlplan_, other->controlplan_);
  std::swap(segments_, other->segments_);
  std::swap(imu_, other->imu_);
  std::swap(localizer_, other->localizer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata msg_Log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_Log_descriptor_;
  metadata.reflection = msg_Log_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// msg_Log

// required double timestamp = 1;
bool msg_Log::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void msg_Log::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void msg_Log::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void msg_Log::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double msg_Log::timestamp() const {
  // @@protoc_insertion_point(field_get:msg_Log.timestamp)
  return timestamp_;
}
 void msg_Log::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:msg_Log.timestamp)
}

// optional .msg_VehicleState vehicleState = 2;
bool msg_Log::has_vehiclestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void msg_Log::set_has_vehiclestate() {
  _has_bits_[0] |= 0x00000002u;
}
void msg_Log::clear_has_vehiclestate() {
  _has_bits_[0] &= ~0x00000002u;
}
void msg_Log::clear_vehiclestate() {
  if (vehiclestate_ != NULL) vehiclestate_->::msg_VehicleState::Clear();
  clear_has_vehiclestate();
}
const ::msg_VehicleState& msg_Log::vehiclestate() const {
  // @@protoc_insertion_point(field_get:msg_Log.vehicleState)
  return vehiclestate_ != NULL ? *vehiclestate_ : *default_instance_->vehiclestate_;
}
::msg_VehicleState* msg_Log::mutable_vehiclestate() {
  set_has_vehiclestate();
  if (vehiclestate_ == NULL) {
    vehiclestate_ = new ::msg_VehicleState;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.vehicleState)
  return vehiclestate_;
}
::msg_VehicleState* msg_Log::release_vehiclestate() {
  // @@protoc_insertion_point(field_release:msg_Log.vehicleState)
  clear_has_vehiclestate();
  ::msg_VehicleState* temp = vehiclestate_;
  vehiclestate_ = NULL;
  return temp;
}
void msg_Log::set_allocated_vehiclestate(::msg_VehicleState* vehiclestate) {
  delete vehiclestate_;
  vehiclestate_ = vehiclestate;
  if (vehiclestate) {
    set_has_vehiclestate();
  } else {
    clear_has_vehiclestate();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.vehicleState)
}

// optional .msg_ControlCommand controlCommand = 3;
bool msg_Log::has_controlcommand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void msg_Log::set_has_controlcommand() {
  _has_bits_[0] |= 0x00000004u;
}
void msg_Log::clear_has_controlcommand() {
  _has_bits_[0] &= ~0x00000004u;
}
void msg_Log::clear_controlcommand() {
  if (controlcommand_ != NULL) controlcommand_->::msg_ControlCommand::Clear();
  clear_has_controlcommand();
}
const ::msg_ControlCommand& msg_Log::controlcommand() const {
  // @@protoc_insertion_point(field_get:msg_Log.controlCommand)
  return controlcommand_ != NULL ? *controlcommand_ : *default_instance_->controlcommand_;
}
::msg_ControlCommand* msg_Log::mutable_controlcommand() {
  set_has_controlcommand();
  if (controlcommand_ == NULL) {
    controlcommand_ = new ::msg_ControlCommand;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.controlCommand)
  return controlcommand_;
}
::msg_ControlCommand* msg_Log::release_controlcommand() {
  // @@protoc_insertion_point(field_release:msg_Log.controlCommand)
  clear_has_controlcommand();
  ::msg_ControlCommand* temp = controlcommand_;
  controlcommand_ = NULL;
  return temp;
}
void msg_Log::set_allocated_controlcommand(::msg_ControlCommand* controlcommand) {
  delete controlcommand_;
  controlcommand_ = controlcommand;
  if (controlcommand) {
    set_has_controlcommand();
  } else {
    clear_has_controlcommand();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.controlCommand)
}

// optional .msg_ControlPlan controlPlan = 4;
bool msg_Log::has_controlplan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void msg_Log::set_has_controlplan() {
  _has_bits_[0] |= 0x00000008u;
}
void msg_Log::clear_has_controlplan() {
  _has_bits_[0] &= ~0x00000008u;
}
void msg_Log::clear_controlplan() {
  if (controlplan_ != NULL) controlplan_->::msg_ControlPlan::Clear();
  clear_has_controlplan();
}
const ::msg_ControlPlan& msg_Log::controlplan() const {
  // @@protoc_insertion_point(field_get:msg_Log.controlPlan)
  return controlplan_ != NULL ? *controlplan_ : *default_instance_->controlplan_;
}
::msg_ControlPlan* msg_Log::mutable_controlplan() {
  set_has_controlplan();
  if (controlplan_ == NULL) {
    controlplan_ = new ::msg_ControlPlan;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.controlPlan)
  return controlplan_;
}
::msg_ControlPlan* msg_Log::release_controlplan() {
  // @@protoc_insertion_point(field_release:msg_Log.controlPlan)
  clear_has_controlplan();
  ::msg_ControlPlan* temp = controlplan_;
  controlplan_ = NULL;
  return temp;
}
void msg_Log::set_allocated_controlplan(::msg_ControlPlan* controlplan) {
  delete controlplan_;
  controlplan_ = controlplan;
  if (controlplan) {
    set_has_controlplan();
  } else {
    clear_has_controlplan();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.controlPlan)
}

// optional .msg_Segments segments = 5;
bool msg_Log::has_segments() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void msg_Log::set_has_segments() {
  _has_bits_[0] |= 0x00000010u;
}
void msg_Log::clear_has_segments() {
  _has_bits_[0] &= ~0x00000010u;
}
void msg_Log::clear_segments() {
  if (segments_ != NULL) segments_->::msg_Segments::Clear();
  clear_has_segments();
}
const ::msg_Segments& msg_Log::segments() const {
  // @@protoc_insertion_point(field_get:msg_Log.segments)
  return segments_ != NULL ? *segments_ : *default_instance_->segments_;
}
::msg_Segments* msg_Log::mutable_segments() {
  set_has_segments();
  if (segments_ == NULL) {
    segments_ = new ::msg_Segments;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.segments)
  return segments_;
}
::msg_Segments* msg_Log::release_segments() {
  // @@protoc_insertion_point(field_release:msg_Log.segments)
  clear_has_segments();
  ::msg_Segments* temp = segments_;
  segments_ = NULL;
  return temp;
}
void msg_Log::set_allocated_segments(::msg_Segments* segments) {
  delete segments_;
  segments_ = segments;
  if (segments) {
    set_has_segments();
  } else {
    clear_has_segments();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.segments)
}

// optional .msg_ImuLog imu = 6;
bool msg_Log::has_imu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void msg_Log::set_has_imu() {
  _has_bits_[0] |= 0x00000020u;
}
void msg_Log::clear_has_imu() {
  _has_bits_[0] &= ~0x00000020u;
}
void msg_Log::clear_imu() {
  if (imu_ != NULL) imu_->::msg_ImuLog::Clear();
  clear_has_imu();
}
const ::msg_ImuLog& msg_Log::imu() const {
  // @@protoc_insertion_point(field_get:msg_Log.imu)
  return imu_ != NULL ? *imu_ : *default_instance_->imu_;
}
::msg_ImuLog* msg_Log::mutable_imu() {
  set_has_imu();
  if (imu_ == NULL) {
    imu_ = new ::msg_ImuLog;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.imu)
  return imu_;
}
::msg_ImuLog* msg_Log::release_imu() {
  // @@protoc_insertion_point(field_release:msg_Log.imu)
  clear_has_imu();
  ::msg_ImuLog* temp = imu_;
  imu_ = NULL;
  return temp;
}
void msg_Log::set_allocated_imu(::msg_ImuLog* imu) {
  delete imu_;
  imu_ = imu;
  if (imu) {
    set_has_imu();
  } else {
    clear_has_imu();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.imu)
}

// optional .msg_LocalizerLog localizer = 7;
bool msg_Log::has_localizer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void msg_Log::set_has_localizer() {
  _has_bits_[0] |= 0x00000040u;
}
void msg_Log::clear_has_localizer() {
  _has_bits_[0] &= ~0x00000040u;
}
void msg_Log::clear_localizer() {
  if (localizer_ != NULL) localizer_->::msg_LocalizerLog::Clear();
  clear_has_localizer();
}
const ::msg_LocalizerLog& msg_Log::localizer() const {
  // @@protoc_insertion_point(field_get:msg_Log.localizer)
  return localizer_ != NULL ? *localizer_ : *default_instance_->localizer_;
}
::msg_LocalizerLog* msg_Log::mutable_localizer() {
  set_has_localizer();
  if (localizer_ == NULL) {
    localizer_ = new ::msg_LocalizerLog;
  }
  // @@protoc_insertion_point(field_mutable:msg_Log.localizer)
  return localizer_;
}
::msg_LocalizerLog* msg_Log::release_localizer() {
  // @@protoc_insertion_point(field_release:msg_Log.localizer)
  clear_has_localizer();
  ::msg_LocalizerLog* temp = localizer_;
  localizer_ = NULL;
  return temp;
}
void msg_Log::set_allocated_localizer(::msg_LocalizerLog* localizer) {
  delete localizer_;
  localizer_ = localizer;
  if (localizer) {
    set_has_localizer();
  } else {
    clear_has_localizer();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_Log.localizer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
